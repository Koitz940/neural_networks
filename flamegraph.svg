<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="838" onload="init(evt)" viewBox="0 0 1200 838" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="838" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="821.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="821.00"> </text><svg id="frames" x="10" width="1180" total_samples="34207"><g><title>`0x7FFFCCA2FE50 (6 samples, 0.02%)</title><rect x="0.0117%" y="613" width="0.0175%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="6"/><text x="0.2617%" y="623.50"></text></g><g><title>`0x7FFFCCAB1A44 (6 samples, 0.02%)</title><rect x="0.0117%" y="597" width="0.0175%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="6"/><text x="0.2617%" y="607.50"></text></g><g><title>`0x7FFFCCA5949D (4 samples, 0.01%)</title><rect x="0.0175%" y="581" width="0.0117%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="4"/><text x="0.2675%" y="591.50"></text></g><g><title>`0x7FFFCA0E0046 (7 samples, 0.02%)</title><rect x="0.0117%" y="725" width="0.0205%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="7"/><text x="0.2617%" y="735.50"></text></g><g><title>`0x7FFFCA0C553D (7 samples, 0.02%)</title><rect x="0.0117%" y="709" width="0.0205%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="7"/><text x="0.2617%" y="719.50"></text></g><g><title>`0x7FFFCA05423B (7 samples, 0.02%)</title><rect x="0.0117%" y="693" width="0.0205%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="7"/><text x="0.2617%" y="703.50"></text></g><g><title>`0x7FFFCA0B6225 (7 samples, 0.02%)</title><rect x="0.0117%" y="677" width="0.0205%" height="15" fill="rgb(207,160,47)" fg:x="4" fg:w="7"/><text x="0.2617%" y="687.50"></text></g><g><title>`0x7FFFC9BC2856 (7 samples, 0.02%)</title><rect x="0.0117%" y="661" width="0.0205%" height="15" fill="rgb(228,23,34)" fg:x="4" fg:w="7"/><text x="0.2617%" y="671.50"></text></g><g><title>`0x7FFFCCA74560 (7 samples, 0.02%)</title><rect x="0.0117%" y="645" width="0.0205%" height="15" fill="rgb(218,30,26)" fg:x="4" fg:w="7"/><text x="0.2617%" y="655.50"></text></g><g><title>`0x7FFFCCA2FAD0 (7 samples, 0.02%)</title><rect x="0.0117%" y="629" width="0.0205%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="7"/><text x="0.2617%" y="639.50"></text></g><g><title>neural_networks.exe`core::iter::traits::iterator::Iterator::for_each::call::closure$0(core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;f64,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;u8,alloc::alloc::Global&gt;,neural_networks::main::test::closure_env$0&gt; &gt; &gt;*, tuple$ (28 samples, 0.08%)</title><rect x="0.0468%" y="357" width="0.0819%" height="15" fill="rgb(250,228,42)" fg:x="16" fg:w="28"/><text x="0.2968%" y="367.50"></text></g><g><title>neural_networks.exe`alloc::vec::impl$20::extend_trusted::closure$0(alloc::vec::impl$20::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter (28 samples, 0.08%)</title><rect x="0.0468%" y="341" width="0.0819%" height="15" fill="rgb(240,193,28)" fg:x="16" fg:w="28"/><text x="0.2968%" y="351.50"></text></g><g><title>neural_networks.exe`core::ptr::write (28 samples, 0.08%)</title><rect x="0.0468%" y="325" width="0.0819%" height="15" fill="rgb(216,20,37)" fg:x="16" fg:w="28"/><text x="0.2968%" y="335.50"></text></g><g><title>neural_networks.exe`core::iter::adapters::map::map_fold::closure$0(core::iter::adapters::map::map_fold::closure_env$0&lt;u8,f64,tuple$&lt;&gt;,neural_networks::main::test::closure_env$0,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;f64,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;u8,alloc::alloc::Global&gt;,neural_networks::main::test::closure_env$0&gt; &gt; &gt; &gt;*, tuple$ (41 samples, 0.12%)</title><rect x="0.0468%" y="373" width="0.1199%" height="15" fill="rgb(206,188,39)" fg:x="16" fg:w="41"/><text x="0.2968%" y="383.50"></text></g><g><title>neural_networks.exe`neural_networks::main::test::closure$0 (13 samples, 0.04%)</title><rect x="0.1286%" y="357" width="0.0380%" height="15" fill="rgb(217,207,13)" fg:x="44" fg:w="13"/><text x="0.3786%" y="367.50"></text></g><g><title>neural_networks.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;*, core::ops::range::RangeFrom (43 samples, 0.13%)</title><rect x="0.0439%" y="549" width="0.1257%" height="15" fill="rgb(231,73,38)" fg:x="15" fg:w="43"/><text x="0.2939%" y="559.50"></text></g><g><title>neural_networks.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (43 samples, 0.13%)</title><rect x="0.0439%" y="533" width="0.1257%" height="15" fill="rgb(225,20,46)" fg:x="15" fg:w="43"/><text x="0.2939%" y="543.50"></text></g><g><title>neural_networks.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::as_slice (43 samples, 0.13%)</title><rect x="0.0439%" y="517" width="0.1257%" height="15" fill="rgb(210,31,41)" fg:x="15" fg:w="43"/><text x="0.2939%" y="527.50"></text></g><g><title>neural_networks.exe`alloc::vec::in_place_collect::impl$1::from_iter&lt;f64,core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;u8,alloc::alloc::Global&gt;,neural_networks::main::test::closure_env$0&gt; &gt;(core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter (43 samples, 0.13%)</title><rect x="0.0439%" y="501" width="0.1257%" height="15" fill="rgb(221,200,47)" fg:x="15" fg:w="43"/><text x="0.2939%" y="511.50"></text></g><g><title>neural_networks.exe`alloc::vec::spec_from_iter_nested::impl$1::from_iter(core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter (43 samples, 0.13%)</title><rect x="0.0439%" y="485" width="0.1257%" height="15" fill="rgb(226,26,5)" fg:x="15" fg:w="43"/><text x="0.2939%" y="495.50"></text></g><g><title>neural_networks.exe`alloc::vec::spec_from_iter_nested::impl$1::from_iter(core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter (43 samples, 0.13%)</title><rect x="0.0439%" y="469" width="0.1257%" height="15" fill="rgb(249,33,26)" fg:x="15" fg:w="43"/><text x="0.2939%" y="479.50"></text></g><g><title>neural_networks.exe`alloc::vec::spec_extend::impl$1::spec_extend(alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;*, core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter (42 samples, 0.12%)</title><rect x="0.0468%" y="453" width="0.1228%" height="15" fill="rgb(235,183,28)" fg:x="16" fg:w="42"/><text x="0.2968%" y="463.50"></text></g><g><title>neural_networks.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::extend_trusted(core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter (42 samples, 0.12%)</title><rect x="0.0468%" y="437" width="0.1228%" height="15" fill="rgb(221,5,38)" fg:x="16" fg:w="42"/><text x="0.2968%" y="447.50"></text></g><g><title>neural_networks.exe`core::iter::traits::iterator::Iterator::for_each(core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;u8,alloc::alloc::Global&gt;,neural_networks::main::test::closure_env$0&gt;, alloc::vec::impl$20::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter (42 samples, 0.12%)</title><rect x="0.0468%" y="421" width="0.1228%" height="15" fill="rgb(247,18,42)" fg:x="16" fg:w="42"/><text x="0.2968%" y="431.50"></text></g><g><title>neural_networks.exe`core::iter::adapters::map::impl$2::fold(core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;u8,alloc::alloc::Global&gt;,neural_networks::main::test::closure_env$0&gt;, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;f64,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter (42 samples, 0.12%)</title><rect x="0.0468%" y="405" width="0.1228%" height="15" fill="rgb(241,131,45)" fg:x="16" fg:w="42"/><text x="0.2968%" y="415.50"></text></g><g><title>neural_networks.exe`alloc::vec::into_iter::impl$5::fold(alloc::vec::into_iter::IntoIter&lt;u8,alloc::alloc::Global&gt;, tuple$&lt;&gt;, core::iter::adapters::map::map_fold::closure_env$0&lt;u8,f64,tuple$&lt;&gt;,neural_networks::main::test::closure_env$0,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;f64,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter (42 samples, 0.12%)</title><rect x="0.0468%" y="389" width="0.1228%" height="15" fill="rgb(249,31,29)" fg:x="16" fg:w="42"/><text x="0.2968%" y="399.50"></text></g><g><title>`0x7FFFB9AD0B6B (5 samples, 0.01%)</title><rect x="0.1725%" y="325" width="0.0146%" height="15" fill="rgb(225,111,53)" fg:x="59" fg:w="5"/><text x="0.4225%" y="335.50"></text></g><g><title>`0x7FFFB9AD0BB9 (5 samples, 0.01%)</title><rect x="0.1871%" y="325" width="0.0146%" height="15" fill="rgb(238,160,17)" fg:x="64" fg:w="5"/><text x="0.4371%" y="335.50"></text></g><g><title>`0x7FFFB9AD0BC3 (9 samples, 0.03%)</title><rect x="0.2017%" y="325" width="0.0263%" height="15" fill="rgb(214,148,48)" fg:x="69" fg:w="9"/><text x="0.4517%" y="335.50"></text></g><g><title>`0x7FFFB9AD0BCC (4 samples, 0.01%)</title><rect x="0.2368%" y="325" width="0.0117%" height="15" fill="rgb(232,36,49)" fg:x="81" fg:w="4"/><text x="0.4868%" y="335.50"></text></g><g><title>`0x7FFFB9AD0BD1 (4 samples, 0.01%)</title><rect x="0.2485%" y="325" width="0.0117%" height="15" fill="rgb(209,103,24)" fg:x="85" fg:w="4"/><text x="0.4985%" y="335.50"></text></g><g><title>`0x7FFFB9AD0BE6 (4 samples, 0.01%)</title><rect x="0.2602%" y="325" width="0.0117%" height="15" fill="rgb(229,88,8)" fg:x="89" fg:w="4"/><text x="0.5102%" y="335.50"></text></g><g><title>`0x7FFFB9AD0BF6 (5 samples, 0.01%)</title><rect x="0.2748%" y="325" width="0.0146%" height="15" fill="rgb(213,181,19)" fg:x="94" fg:w="5"/><text x="0.5248%" y="335.50"></text></g><g><title>`0x7FFFB9AD0BFE (4 samples, 0.01%)</title><rect x="0.2894%" y="325" width="0.0117%" height="15" fill="rgb(254,191,54)" fg:x="99" fg:w="4"/><text x="0.5394%" y="335.50"></text></g><g><title>`0x7FFFB9AD0C06 (5 samples, 0.01%)</title><rect x="0.3011%" y="325" width="0.0146%" height="15" fill="rgb(241,83,37)" fg:x="103" fg:w="5"/><text x="0.5511%" y="335.50"></text></g><g><title>neural_networks.exe`core::iter::traits::iterator::Iterator::for_each::call::closure$0(core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::ChunksExact&lt;f64&gt;,neural_networks::main::train::closure_env$1&gt; &gt; &gt;*, tuple$&lt;&gt;, alloc::vec::Vec (51 samples, 0.15%)</title><rect x="0.1696%" y="373" width="0.1491%" height="15" fill="rgb(233,36,39)" fg:x="58" fg:w="51"/><text x="0.4196%" y="383.50"></text></g><g><title>neural_networks.exe`alloc::vec::impl$20::extend_trusted::closure$0(alloc::vec::impl$20::extend_trusted::closure_env$0&lt;alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::ChunksExact&lt;f64&gt;,neural_networks::main::train::closure_env$1&gt; &gt;*, alloc::vec::Vec (51 samples, 0.15%)</title><rect x="0.1696%" y="357" width="0.1491%" height="15" fill="rgb(226,3,54)" fg:x="58" fg:w="51"/><text x="0.4196%" y="367.50"></text></g><g><title>neural_networks.exe`core::ptr::write(alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;*, alloc::vec::Vec (51 samples, 0.15%)</title><rect x="0.1696%" y="341" width="0.1491%" height="15" fill="rgb(245,192,40)" fg:x="58" fg:w="51"/><text x="0.4196%" y="351.50"></text></g><g><title>`0x7FFFCCAB0462 (52 samples, 0.15%)</title><rect x="0.3333%" y="197" width="0.1520%" height="15" fill="rgb(238,167,29)" fg:x="114" fg:w="52"/><text x="0.5833%" y="207.50"></text></g><g><title>`0x7FFFCCA37B9F (55 samples, 0.16%)</title><rect x="0.3333%" y="213" width="0.1608%" height="15" fill="rgb(232,182,51)" fg:x="114" fg:w="55"/><text x="0.5833%" y="223.50"></text></g><g><title>`0x7FFFCCA368C4 (62 samples, 0.18%)</title><rect x="0.3245%" y="245" width="0.1812%" height="15" fill="rgb(231,60,39)" fg:x="111" fg:w="62"/><text x="0.5745%" y="255.50"></text></g><g><title>`0x7FFFCCA36A04 (62 samples, 0.18%)</title><rect x="0.3245%" y="229" width="0.1812%" height="15" fill="rgb(208,69,12)" fg:x="111" fg:w="62"/><text x="0.5745%" y="239.50"></text></g><g><title>neural_networks.exe`core::iter::traits::iterator::Iterator::collect(core::slice::iter::Iter&lt;ref$ (117 samples, 0.34%)</title><rect x="0.1696%" y="549" width="0.3420%" height="15" fill="rgb(235,93,37)" fg:x="58" fg:w="117"/><text x="0.4196%" y="559.50"></text></g><g><title>neural_networks.exe`std::path::impl$42::from_iter(core::slice::iter::Iter&lt;ref$ (117 samples, 0.34%)</title><rect x="0.1696%" y="533" width="0.3420%" height="15" fill="rgb(213,116,39)" fg:x="58" fg:w="117"/><text x="0.4196%" y="543.50"></text></g><g><title>neural_networks.exe`std::path::PathBuf::new (117 samples, 0.34%)</title><rect x="0.1696%" y="517" width="0.3420%" height="15" fill="rgb(222,207,29)" fg:x="58" fg:w="117"/><text x="0.4196%" y="527.50"></text></g><g><title>neural_networks.exe`alloc::vec::spec_from_iter::impl$0::from_iter&lt;alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::ChunksExact&lt;f64&gt;,neural_networks::main::train::closure_env$1&gt; &gt;(core::iter::adapters::map::Map&lt;core::slice::iter::ChunksExact (117 samples, 0.34%)</title><rect x="0.1696%" y="501" width="0.3420%" height="15" fill="rgb(206,96,30)" fg:x="58" fg:w="117"/><text x="0.4196%" y="511.50"></text></g><g><title>neural_networks.exe`alloc::vec::spec_from_iter_nested::impl$1::from_iter(core::iter::adapters::map::Map&lt;core::slice::iter::ChunksExact (117 samples, 0.34%)</title><rect x="0.1696%" y="485" width="0.3420%" height="15" fill="rgb(218,138,4)" fg:x="58" fg:w="117"/><text x="0.4196%" y="495.50"></text></g><g><title>neural_networks.exe`alloc::vec::spec_extend::impl$1::spec_extend(alloc::vec::Vec&lt;alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;,alloc::alloc::Global&gt;*, core::iter::adapters::map::Map&lt;core::slice::iter::ChunksExact (117 samples, 0.34%)</title><rect x="0.1696%" y="469" width="0.3420%" height="15" fill="rgb(250,191,14)" fg:x="58" fg:w="117"/><text x="0.4196%" y="479.50"></text></g><g><title>neural_networks.exe`alloc::vec::Vec&lt;alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;,alloc::alloc::Global&gt;::extend_trusted(core::iter::adapters::map::Map&lt;core::slice::iter::ChunksExact (117 samples, 0.34%)</title><rect x="0.1696%" y="453" width="0.3420%" height="15" fill="rgb(239,60,40)" fg:x="58" fg:w="117"/><text x="0.4196%" y="463.50"></text></g><g><title>neural_networks.exe`core::iter::traits::iterator::Iterator::for_each(core::iter::adapters::map::Map&lt;core::slice::iter::ChunksExact&lt;f64&gt;,neural_networks::main::train::closure_env$1&gt;, alloc::vec::impl$20::extend_trusted::closure_env$0&lt;alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::ChunksExact (117 samples, 0.34%)</title><rect x="0.1696%" y="437" width="0.3420%" height="15" fill="rgb(206,27,48)" fg:x="58" fg:w="117"/><text x="0.4196%" y="447.50"></text></g><g><title>neural_networks.exe`core::iter::adapters::map::impl$2::fold(core::iter::adapters::map::Map&lt;core::slice::iter::ChunksExact&lt;f64&gt;,neural_networks::main::train::closure_env$1&gt;, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::ChunksExact (117 samples, 0.34%)</title><rect x="0.1696%" y="421" width="0.3420%" height="15" fill="rgb(225,35,8)" fg:x="58" fg:w="117"/><text x="0.4196%" y="431.50"></text></g><g><title>neural_networks.exe`core::iter::traits::iterator::Iterator::fold(core::slice::iter::ChunksExact&lt;f64&gt;, tuple$&lt;&gt;, core::iter::adapters::map::map_fold::closure_env$0&lt;ref$&lt;slice2$&lt;f64&gt; &gt;,alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;,tuple$&lt;&gt;,neural_networks::main::train::closure_env$1,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::ChunksExact (117 samples, 0.34%)</title><rect x="0.1696%" y="405" width="0.3420%" height="15" fill="rgb(250,213,24)" fg:x="58" fg:w="117"/><text x="0.4196%" y="415.50"></text></g><g><title>neural_networks.exe`core::iter::adapters::map::map_fold::closure$0(core::iter::adapters::map::map_fold::closure_env$0&lt;ref$&lt;slice2$&lt;f64&gt; &gt;,alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;,tuple$&lt;&gt;,neural_networks::main::train::closure_env$1,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::ChunksExact&lt;f64&gt;,neural_networks::main::train::closure_env$1&gt; &gt; &gt; &gt;*, tuple$&lt;&gt;, ref$&lt;slice2$ (117 samples, 0.34%)</title><rect x="0.1696%" y="389" width="0.3420%" height="15" fill="rgb(247,123,22)" fg:x="58" fg:w="117"/><text x="0.4196%" y="399.50"></text></g><g><title>neural_networks.exe`neural_networks::main::train::closure$1(neural_networks::main::train::closure_env$1*, ref$&lt;slice2$ (66 samples, 0.19%)</title><rect x="0.3186%" y="373" width="0.1929%" height="15" fill="rgb(231,138,38)" fg:x="109" fg:w="66"/><text x="0.5686%" y="383.50"></text></g><g><title>neural_networks.exe`alloc::slice::impl$0::to_vec(ref$&lt;slice2$ (66 samples, 0.19%)</title><rect x="0.3186%" y="357" width="0.1929%" height="15" fill="rgb(231,145,46)" fg:x="109" fg:w="66"/><text x="0.5686%" y="367.50"></text></g><g><title>neural_networks.exe`alloc::slice::impl$0::to_vec_in(ref$&lt;slice2$ (66 samples, 0.19%)</title><rect x="0.3186%" y="341" width="0.1929%" height="15" fill="rgb(251,118,11)" fg:x="109" fg:w="66"/><text x="0.5686%" y="351.50"></text></g><g><title>neural_networks.exe`alloc::slice::impl$0::to_vec_in::impl$1::to_vec(ref$&lt;slice2$ (66 samples, 0.19%)</title><rect x="0.3186%" y="325" width="0.1929%" height="15" fill="rgb(217,147,25)" fg:x="109" fg:w="66"/><text x="0.5686%" y="335.50"></text></g><g><title>neural_networks.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (66 samples, 0.19%)</title><rect x="0.3186%" y="309" width="0.1929%" height="15" fill="rgb(247,81,37)" fg:x="109" fg:w="66"/><text x="0.5686%" y="319.50"></text></g><g><title>neural_networks.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (66 samples, 0.19%)</title><rect x="0.3186%" y="293" width="0.1929%" height="15" fill="rgb(209,12,38)" fg:x="109" fg:w="66"/><text x="0.5686%" y="303.50"></text></g><g><title>neural_networks.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (66 samples, 0.19%)</title><rect x="0.3186%" y="277" width="0.1929%" height="15" fill="rgb(227,1,9)" fg:x="109" fg:w="66"/><text x="0.5686%" y="287.50"></text></g><g><title>neural_networks.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (66 samples, 0.19%)</title><rect x="0.3186%" y="261" width="0.1929%" height="15" fill="rgb(248,47,43)" fg:x="109" fg:w="66"/><text x="0.5686%" y="271.50"></text></g><g><title>neural_networks.exe`enum2$&lt;core::result::Result&lt;usize,std::io::error::Error&gt; &gt;::expect(enum2$&lt;core::result::Result&lt;usize,std::io::error::Error&gt; &gt;, ref$ (4 samples, 0.01%)</title><rect x="0.5116%" y="549" width="0.0117%" height="15" fill="rgb(221,10,30)" fg:x="175" fg:w="4"/><text x="0.7616%" y="559.50"></text></g><g><title>neural_networks.exe`std::fs::impl$8::read_to_end (4 samples, 0.01%)</title><rect x="0.5116%" y="533" width="0.0117%" height="15" fill="rgb(210,229,1)" fg:x="175" fg:w="4"/><text x="0.7616%" y="543.50"></text></g><g><title>neural_networks.exe`std::io::default_read_to_end&lt;ref$&lt;std::fs::File&gt; &gt; (4 samples, 0.01%)</title><rect x="0.5116%" y="517" width="0.0117%" height="15" fill="rgb(222,148,37)" fg:x="175" fg:w="4"/><text x="0.7616%" y="527.50"></text></g><g><title>neural_networks.exe`std::fs::impl$5::read_buf (4 samples, 0.01%)</title><rect x="0.5116%" y="501" width="0.0117%" height="15" fill="rgb(234,67,33)" fg:x="175" fg:w="4"/><text x="0.7616%" y="511.50"></text></g><g><title>neural_networks.exe`std::sys::fs::windows::File::read_buf (4 samples, 0.01%)</title><rect x="0.5116%" y="485" width="0.0117%" height="15" fill="rgb(247,98,35)" fg:x="175" fg:w="4"/><text x="0.7616%" y="495.50"></text></g><g><title>neural_networks.exe`std::sys::pal::windows::handle::Handle::read_buf (4 samples, 0.01%)</title><rect x="0.5116%" y="469" width="0.0117%" height="15" fill="rgb(247,138,52)" fg:x="175" fg:w="4"/><text x="0.7616%" y="479.50"></text></g><g><title>neural_networks.exe`std::sys::pal::windows::handle::Handle::synchronous_read (4 samples, 0.01%)</title><rect x="0.5116%" y="453" width="0.0117%" height="15" fill="rgb(213,79,30)" fg:x="175" fg:w="4"/><text x="0.7616%" y="463.50"></text></g><g><title>`0x7FFFCCB82034 (4 samples, 0.01%)</title><rect x="0.5116%" y="437" width="0.0117%" height="15" fill="rgb(246,177,23)" fg:x="175" fg:w="4"/><text x="0.7616%" y="447.50"></text></g><g><title>`0x7FFFCCA3A0D4 (8 samples, 0.02%)</title><rect x="0.5262%" y="517" width="0.0234%" height="15" fill="rgb(230,62,27)" fg:x="180" fg:w="8"/><text x="0.7762%" y="527.50"></text></g><g><title>`0x7FFFCCAA06E0 (8 samples, 0.02%)</title><rect x="0.5262%" y="501" width="0.0234%" height="15" fill="rgb(216,154,8)" fg:x="180" fg:w="8"/><text x="0.7762%" y="511.50"></text></g><g><title>`0x7FFFCCA3C136 (8 samples, 0.02%)</title><rect x="0.5262%" y="485" width="0.0234%" height="15" fill="rgb(244,35,45)" fg:x="180" fg:w="8"/><text x="0.7762%" y="495.50"></text></g><g><title>`0x7FFFCCAC1D98 (8 samples, 0.02%)</title><rect x="0.5262%" y="469" width="0.0234%" height="15" fill="rgb(251,115,12)" fg:x="180" fg:w="8"/><text x="0.7762%" y="479.50"></text></g><g><title>`0x7FFFCCA3F77E (7 samples, 0.02%)</title><rect x="0.5291%" y="453" width="0.0205%" height="15" fill="rgb(240,54,50)" fg:x="181" fg:w="7"/><text x="0.7791%" y="463.50"></text></g><g><title>`0x7FFFCCB0AD59 (7 samples, 0.02%)</title><rect x="0.5291%" y="437" width="0.0205%" height="15" fill="rgb(233,84,52)" fg:x="181" fg:w="7"/><text x="0.7791%" y="447.50"></text></g><g><title>`0x7FFFCCB82334 (7 samples, 0.02%)</title><rect x="0.5291%" y="421" width="0.0205%" height="15" fill="rgb(207,117,47)" fg:x="181" fg:w="7"/><text x="0.7791%" y="431.50"></text></g><g><title>`0x7FFFCCAC1D98 (8 samples, 0.02%)</title><rect x="0.5554%" y="453" width="0.0234%" height="15" fill="rgb(249,43,39)" fg:x="190" fg:w="8"/><text x="0.8054%" y="463.50"></text></g><g><title>`0x7FFFCCA3F77E (8 samples, 0.02%)</title><rect x="0.5554%" y="437" width="0.0234%" height="15" fill="rgb(209,38,44)" fg:x="190" fg:w="8"/><text x="0.8054%" y="447.50"></text></g><g><title>`0x7FFFCCB0AD59 (8 samples, 0.02%)</title><rect x="0.5554%" y="421" width="0.0234%" height="15" fill="rgb(236,212,23)" fg:x="190" fg:w="8"/><text x="0.8054%" y="431.50"></text></g><g><title>`0x7FFFCCB82334 (8 samples, 0.02%)</title><rect x="0.5554%" y="405" width="0.0234%" height="15" fill="rgb(242,79,21)" fg:x="190" fg:w="8"/><text x="0.8054%" y="415.50"></text></g><g><title>`0x7FFFCCAA0648 (20 samples, 0.06%)</title><rect x="0.5233%" y="533" width="0.0585%" height="15" fill="rgb(211,96,35)" fg:x="179" fg:w="20"/><text x="0.7733%" y="543.50"></text></g><g><title>`0x7FFFCCA3A14B (11 samples, 0.03%)</title><rect x="0.5496%" y="517" width="0.0322%" height="15" fill="rgb(253,215,40)" fg:x="188" fg:w="11"/><text x="0.7996%" y="527.50"></text></g><g><title>`0x7FFFCCADF082 (11 samples, 0.03%)</title><rect x="0.5496%" y="501" width="0.0322%" height="15" fill="rgb(211,81,21)" fg:x="188" fg:w="11"/><text x="0.7996%" y="511.50"></text></g><g><title>`0x7FFFCCAA06E0 (11 samples, 0.03%)</title><rect x="0.5496%" y="485" width="0.0322%" height="15" fill="rgb(208,190,38)" fg:x="188" fg:w="11"/><text x="0.7996%" y="495.50"></text></g><g><title>`0x7FFFCCA3C136 (10 samples, 0.03%)</title><rect x="0.5525%" y="469" width="0.0292%" height="15" fill="rgb(235,213,38)" fg:x="189" fg:w="10"/><text x="0.8025%" y="479.50"></text></g><g><title>neural_networks.exe`core::iter::traits::iterator::Iterator::max_by(core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter (4 samples, 0.01%)</title><rect x="0.5818%" y="533" width="0.0117%" height="15" fill="rgb(237,122,38)" fg:x="199" fg:w="4"/><text x="0.8318%" y="543.50"></text></g><g><title>neural_networks.exe`core::iter::traits::iterator::Iterator::reduce(core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;f64&gt; &gt;, core::iter::traits::iterator::Iterator::max_by::fold::closure_env$0&lt;tuple$&lt;usize,ref$ (4 samples, 0.01%)</title><rect x="0.5818%" y="517" width="0.0117%" height="15" fill="rgb(244,218,35)" fg:x="199" fg:w="4"/><text x="0.8318%" y="527.50"></text></g><g><title>neural_networks.exe`core::iter::adapters::enumerate::impl$1::fold(core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;f64&gt; &gt;, tuple$&lt;usize,ref$&lt;f64&gt; &gt;, core::iter::traits::iterator::Iterator::max_by::fold::closure_env$0&lt;tuple$&lt;usize,ref$ (4 samples, 0.01%)</title><rect x="0.5818%" y="501" width="0.0117%" height="15" fill="rgb(240,68,47)" fg:x="199" fg:w="4"/><text x="0.8318%" y="511.50"></text></g><g><title>neural_networks.exe`core::slice::iter::impl$182::fold(core::slice::iter::Iter&lt;f64&gt;, tuple$&lt;usize,ref$&lt;f64&gt; &gt;, core::iter::adapters::enumerate::impl$1::fold::enumerate::closure_env$0&lt;ref$&lt;f64&gt;,tuple$&lt;usize,ref$&lt;f64&gt; &gt;,core::iter::traits::iterator::Iterator::max_by::fold::closure_env$0&lt;tuple$&lt;usize,ref$ (4 samples, 0.01%)</title><rect x="0.5818%" y="485" width="0.0117%" height="15" fill="rgb(210,16,53)" fg:x="199" fg:w="4"/><text x="0.8318%" y="495.50"></text></g><g><title>`0x7FFFCA09FAA7 (4 samples, 0.01%)</title><rect x="0.6344%" y="245" width="0.0117%" height="15" fill="rgb(235,124,12)" fg:x="217" fg:w="4"/><text x="0.8844%" y="255.50"></text></g><g><title>neural_networks.exe`core::iter::traits::iterator::Iterator::collect(core::iter::adapters::map::Map&lt;core::slice::iter::Iter (21 samples, 0.06%)</title><rect x="0.5993%" y="453" width="0.0614%" height="15" fill="rgb(224,169,11)" fg:x="205" fg:w="21"/><text x="0.8493%" y="463.50"></text></g><g><title>neural_networks.exe`alloc::vec::impl$15::from_iter(core::iter::adapters::map::Map&lt;core::slice::iter::Iter (21 samples, 0.06%)</title><rect x="0.5993%" y="437" width="0.0614%" height="15" fill="rgb(250,166,2)" fg:x="205" fg:w="21"/><text x="0.8493%" y="447.50"></text></g><g><title>neural_networks.exe`alloc::vec::spec_from_iter::impl$0::from_iter(core::iter::adapters::map::Map&lt;core::slice::iter::Iter (21 samples, 0.06%)</title><rect x="0.5993%" y="421" width="0.0614%" height="15" fill="rgb(242,216,29)" fg:x="205" fg:w="21"/><text x="0.8493%" y="431.50"></text></g><g><title>neural_networks.exe`alloc::vec::spec_from_iter_nested::impl$1::from_iter(core::iter::adapters::map::Map&lt;core::slice::iter::Iter (21 samples, 0.06%)</title><rect x="0.5993%" y="405" width="0.0614%" height="15" fill="rgb(230,116,27)" fg:x="205" fg:w="21"/><text x="0.8493%" y="415.50"></text></g><g><title>neural_networks.exe`alloc::vec::spec_extend::impl$1::spec_extend(alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;*, core::iter::adapters::map::Map&lt;core::slice::iter::Iter (21 samples, 0.06%)</title><rect x="0.5993%" y="389" width="0.0614%" height="15" fill="rgb(228,99,48)" fg:x="205" fg:w="21"/><text x="0.8493%" y="399.50"></text></g><g><title>neural_networks.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::extend_trusted(core::iter::adapters::map::Map&lt;core::slice::iter::Iter (21 samples, 0.06%)</title><rect x="0.5993%" y="373" width="0.0614%" height="15" fill="rgb(253,11,6)" fg:x="205" fg:w="21"/><text x="0.8493%" y="383.50"></text></g><g><title>neural_networks.exe`core::iter::traits::iterator::Iterator::for_each(core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;f64&gt;,neural_networks::matrices::impl$0::sigmoid::closure_env$0&gt;, alloc::vec::impl$20::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::Iter (21 samples, 0.06%)</title><rect x="0.5993%" y="357" width="0.0614%" height="15" fill="rgb(247,143,39)" fg:x="205" fg:w="21"/><text x="0.8493%" y="367.50"></text></g><g><title>neural_networks.exe`core::iter::adapters::map::impl$2::fold(core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;f64&gt;,neural_networks::matrices::impl$0::sigmoid::closure_env$0&gt;, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;f64,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::Iter (21 samples, 0.06%)</title><rect x="0.5993%" y="341" width="0.0614%" height="15" fill="rgb(236,97,10)" fg:x="205" fg:w="21"/><text x="0.8493%" y="351.50"></text></g><g><title>neural_networks.exe`core::slice::iter::impl$182::fold(core::slice::iter::Iter&lt;f64&gt;, tuple$&lt;&gt;, core::iter::adapters::map::map_fold::closure_env$0&lt;ref$&lt;f64&gt;,f64,tuple$&lt;&gt;,neural_networks::matrices::impl$0::sigmoid::closure_env$0,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;f64,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::Iter (21 samples, 0.06%)</title><rect x="0.5993%" y="325" width="0.0614%" height="15" fill="rgb(233,208,19)" fg:x="205" fg:w="21"/><text x="0.8493%" y="335.50"></text></g><g><title>neural_networks.exe`core::iter::adapters::map::map_fold::closure$0(core::iter::adapters::map::map_fold::closure_env$0&lt;ref$&lt;f64&gt;,f64,tuple$&lt;&gt;,neural_networks::matrices::impl$0::sigmoid::closure_env$0,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;f64,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;f64&gt;,neural_networks::matrices::impl$0::sigmoid::closure_env$0&gt; &gt; &gt; &gt;*, tuple$ (21 samples, 0.06%)</title><rect x="0.5993%" y="309" width="0.0614%" height="15" fill="rgb(216,164,2)" fg:x="205" fg:w="21"/><text x="0.8493%" y="319.50"></text></g><g><title>neural_networks.exe`neural_networks::matrices::impl$0::sigmoid::closure$0 (21 samples, 0.06%)</title><rect x="0.5993%" y="293" width="0.0614%" height="15" fill="rgb(220,129,5)" fg:x="205" fg:w="21"/><text x="0.8493%" y="303.50"></text></g><g><title>neural_networks.exe`neural_networks::matrices::num_sigmoid (21 samples, 0.06%)</title><rect x="0.5993%" y="277" width="0.0614%" height="15" fill="rgb(242,17,10)" fg:x="205" fg:w="21"/><text x="0.8493%" y="287.50"></text></g><g><title>neural_networks.exe`std::f64::impl$0::powf (21 samples, 0.06%)</title><rect x="0.5993%" y="261" width="0.0614%" height="15" fill="rgb(242,107,0)" fg:x="205" fg:w="21"/><text x="0.8493%" y="271.50"></text></g><g><title>neural_networks.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::with_capacity (4 samples, 0.01%)</title><rect x="0.6607%" y="357" width="0.0117%" height="15" fill="rgb(251,28,31)" fg:x="226" fg:w="4"/><text x="0.9107%" y="367.50"></text></g><g><title>neural_networks.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (4 samples, 0.01%)</title><rect x="0.6607%" y="341" width="0.0117%" height="15" fill="rgb(233,223,10)" fg:x="226" fg:w="4"/><text x="0.9107%" y="351.50"></text></g><g><title>neural_networks.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (4 samples, 0.01%)</title><rect x="0.6607%" y="325" width="0.0117%" height="15" fill="rgb(215,21,27)" fg:x="226" fg:w="4"/><text x="0.9107%" y="335.50"></text></g><g><title>neural_networks.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (4 samples, 0.01%)</title><rect x="0.6607%" y="309" width="0.0117%" height="15" fill="rgb(232,23,21)" fg:x="226" fg:w="4"/><text x="0.9107%" y="319.50"></text></g><g><title>neural_networks.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (4 samples, 0.01%)</title><rect x="0.6607%" y="293" width="0.0117%" height="15" fill="rgb(244,5,23)" fg:x="226" fg:w="4"/><text x="0.9107%" y="303.50"></text></g><g><title>neural_networks.exe`neural_networks::matrices::Matrix::sigmoid (26 samples, 0.08%)</title><rect x="0.5993%" y="469" width="0.0760%" height="15" fill="rgb(226,81,46)" fg:x="205" fg:w="26"/><text x="0.8493%" y="479.50"></text></g><g><title>neural_networks.exe`neural_networks::matrices::impl$1::add (5 samples, 0.01%)</title><rect x="0.6607%" y="453" width="0.0146%" height="15" fill="rgb(247,70,30)" fg:x="226" fg:w="5"/><text x="0.9107%" y="463.50"></text></g><g><title>neural_networks.exe`neural_networks::matrices::Matrix::sum (5 samples, 0.01%)</title><rect x="0.6607%" y="437" width="0.0146%" height="15" fill="rgb(212,68,19)" fg:x="226" fg:w="5"/><text x="0.9107%" y="447.50"></text></g><g><title>neural_networks.exe`core::iter::traits::iterator::Iterator::collect(core::iter::adapters::map::Map&lt;core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;f64&gt;,core::slice::iter::Iter (5 samples, 0.01%)</title><rect x="0.6607%" y="421" width="0.0146%" height="15" fill="rgb(240,187,13)" fg:x="226" fg:w="5"/><text x="0.9107%" y="431.50"></text></g><g><title>neural_networks.exe`alloc::vec::impl$15::from_iter(core::iter::adapters::map::Map&lt;core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;f64&gt;,core::slice::iter::Iter (5 samples, 0.01%)</title><rect x="0.6607%" y="405" width="0.0146%" height="15" fill="rgb(223,113,26)" fg:x="226" fg:w="5"/><text x="0.9107%" y="415.50"></text></g><g><title>neural_networks.exe`alloc::vec::spec_from_iter::impl$0::from_iter(core::iter::adapters::map::Map&lt;core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;f64&gt;,core::slice::iter::Iter (5 samples, 0.01%)</title><rect x="0.6607%" y="389" width="0.0146%" height="15" fill="rgb(206,192,2)" fg:x="226" fg:w="5"/><text x="0.9107%" y="399.50"></text></g><g><title>neural_networks.exe`alloc::vec::spec_from_iter_nested::impl$1::from_iter(core::iter::adapters::map::Map&lt;core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;f64&gt;,core::slice::iter::Iter (5 samples, 0.01%)</title><rect x="0.6607%" y="373" width="0.0146%" height="15" fill="rgb(241,108,4)" fg:x="226" fg:w="5"/><text x="0.9107%" y="383.50"></text></g><g><title>neural_networks.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::push (11 samples, 0.03%)</title><rect x="0.6782%" y="437" width="0.0322%" height="15" fill="rgb(247,173,49)" fg:x="232" fg:w="11"/><text x="0.9282%" y="447.50"></text></g><g><title>`0x7FFFCA0D349E (1,527 samples, 4.46%)</title><rect x="1.8096%" y="389" width="4.4640%" height="15" fill="rgb(224,114,35)" fg:x="619" fg:w="1527"/><text x="2.0596%" y="399.50">`0x7F..</text></g><g><title>neural_networks.exe`core::ptr::non_null::impl$14::eq(core::ptr::non_null::NonNull&lt;neural_networks::network::Layer&gt;*, core::ptr::non_null::NonNull (1,946 samples, 5.69%)</title><rect x="0.5993%" y="501" width="5.6889%" height="15" fill="rgb(245,159,27)" fg:x="205" fg:w="1946"/><text x="0.8493%" y="511.50">neural_..</text></g><g><title>neural_networks.exe`neural_networks::network::Layer::output (1,946 samples, 5.69%)</title><rect x="0.5993%" y="485" width="5.6889%" height="15" fill="rgb(245,172,44)" fg:x="205" fg:w="1946"/><text x="0.8493%" y="495.50">neural_..</text></g><g><title>neural_networks.exe`neural_networks::matrices::impl$3::mul (1,920 samples, 5.61%)</title><rect x="0.6753%" y="469" width="5.6129%" height="15" fill="rgb(236,23,11)" fg:x="231" fg:w="1920"/><text x="0.9253%" y="479.50">neural_..</text></g><g><title>neural_networks.exe`neural_networks::matrices::Matrix::mult (1,919 samples, 5.61%)</title><rect x="0.6782%" y="453" width="5.6100%" height="15" fill="rgb(205,117,38)" fg:x="232" fg:w="1919"/><text x="0.9282%" y="463.50">neural_..</text></g><g><title>neural_networks.exe`core::iter::traits::iterator::Iterator::fold(core::ops::range::Range (1,908 samples, 5.58%)</title><rect x="0.7104%" y="437" width="5.5778%" height="15" fill="rgb(237,72,25)" fg:x="243" fg:w="1908"/><text x="0.9604%" y="447.50">neural_..</text></g><g><title>neural_networks.exe`neural_networks::matrices::impl$0::mult::closure$0 (1,908 samples, 5.58%)</title><rect x="0.7104%" y="421" width="5.5778%" height="15" fill="rgb(244,70,9)" fg:x="243" fg:w="1908"/><text x="0.9604%" y="431.50">neural_..</text></g><g><title>neural_networks.exe`alloc::vec::impl$13::index(alloc::vec::Vec (1,560 samples, 4.56%)</title><rect x="1.7277%" y="405" width="4.5605%" height="15" fill="rgb(217,125,39)" fg:x="591" fg:w="1560"/><text x="1.9777%" y="415.50">neura..</text></g><g><title>neural_networks.exe`core::slice::index::impl$0::index(ref$&lt;slice2$ (5 samples, 0.01%)</title><rect x="6.2736%" y="389" width="0.0146%" height="15" fill="rgb(235,36,10)" fg:x="2146" fg:w="5"/><text x="6.5236%" y="399.50"></text></g><g><title>neural_networks.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$ (5 samples, 0.01%)</title><rect x="6.2736%" y="373" width="0.0146%" height="15" fill="rgb(251,123,47)" fg:x="2146" fg:w="5"/><text x="6.5236%" y="383.50"></text></g><g><title>neural_networks.exe`core::iter::traits::iterator::Iterator::collect(core::iter::adapters::map::Map&lt;core::slice::iter::Iter (11 samples, 0.03%)</title><rect x="6.2970%" y="389" width="0.0322%" height="15" fill="rgb(221,13,13)" fg:x="2154" fg:w="11"/><text x="6.5470%" y="399.50"></text></g><g><title>neural_networks.exe`alloc::vec::impl$15::from_iter(core::iter::adapters::map::Map&lt;core::slice::iter::Iter (11 samples, 0.03%)</title><rect x="6.2970%" y="373" width="0.0322%" height="15" fill="rgb(238,131,9)" fg:x="2154" fg:w="11"/><text x="6.5470%" y="383.50"></text></g><g><title>neural_networks.exe`alloc::vec::spec_from_iter::impl$0::from_iter(core::iter::adapters::map::Map&lt;core::slice::iter::Iter (11 samples, 0.03%)</title><rect x="6.2970%" y="357" width="0.0322%" height="15" fill="rgb(211,50,8)" fg:x="2154" fg:w="11"/><text x="6.5470%" y="367.50"></text></g><g><title>neural_networks.exe`alloc::vec::spec_from_iter_nested::impl$1::from_iter(core::iter::adapters::map::Map&lt;core::slice::iter::Iter (11 samples, 0.03%)</title><rect x="6.2970%" y="341" width="0.0322%" height="15" fill="rgb(245,182,24)" fg:x="2154" fg:w="11"/><text x="6.5470%" y="351.50"></text></g><g><title>neural_networks.exe`alloc::vec::spec_extend::impl$1::spec_extend(alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;*, core::iter::adapters::map::Map&lt;core::slice::iter::Iter (10 samples, 0.03%)</title><rect x="6.2999%" y="325" width="0.0292%" height="15" fill="rgb(242,14,37)" fg:x="2155" fg:w="10"/><text x="6.5499%" y="335.50"></text></g><g><title>neural_networks.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::extend_trusted(core::iter::adapters::map::Map&lt;core::slice::iter::Iter (10 samples, 0.03%)</title><rect x="6.2999%" y="309" width="0.0292%" height="15" fill="rgb(246,228,12)" fg:x="2155" fg:w="10"/><text x="6.5499%" y="319.50"></text></g><g><title>neural_networks.exe`core::iter::traits::iterator::Iterator::for_each(core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;f64&gt;,neural_networks::matrices::impl$0::sigmoid::closure_env$0&gt;, alloc::vec::impl$20::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::Iter (10 samples, 0.03%)</title><rect x="6.2999%" y="293" width="0.0292%" height="15" fill="rgb(213,55,15)" fg:x="2155" fg:w="10"/><text x="6.5499%" y="303.50"></text></g><g><title>neural_networks.exe`core::iter::adapters::map::impl$2::fold(core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;f64&gt;,neural_networks::matrices::impl$0::sigmoid::closure_env$0&gt;, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;f64,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::Iter (10 samples, 0.03%)</title><rect x="6.2999%" y="277" width="0.0292%" height="15" fill="rgb(209,9,3)" fg:x="2155" fg:w="10"/><text x="6.5499%" y="287.50"></text></g><g><title>neural_networks.exe`core::slice::iter::impl$182::fold(core::slice::iter::Iter&lt;f64&gt;, tuple$&lt;&gt;, core::iter::adapters::map::map_fold::closure_env$0&lt;ref$&lt;f64&gt;,f64,tuple$&lt;&gt;,neural_networks::matrices::impl$0::sigmoid::closure_env$0,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;f64,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::Iter (10 samples, 0.03%)</title><rect x="6.2999%" y="261" width="0.0292%" height="15" fill="rgb(230,59,30)" fg:x="2155" fg:w="10"/><text x="6.5499%" y="271.50"></text></g><g><title>neural_networks.exe`core::iter::adapters::map::map_fold::closure$0(core::iter::adapters::map::map_fold::closure_env$0&lt;ref$&lt;f64&gt;,f64,tuple$&lt;&gt;,neural_networks::matrices::impl$0::sigmoid::closure_env$0,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;f64,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;f64&gt;,neural_networks::matrices::impl$0::sigmoid::closure_env$0&gt; &gt; &gt; &gt;*, tuple$ (10 samples, 0.03%)</title><rect x="6.2999%" y="245" width="0.0292%" height="15" fill="rgb(209,121,21)" fg:x="2155" fg:w="10"/><text x="6.5499%" y="255.50"></text></g><g><title>neural_networks.exe`neural_networks::matrices::impl$0::sigmoid::closure$0 (9 samples, 0.03%)</title><rect x="6.3028%" y="229" width="0.0263%" height="15" fill="rgb(220,109,13)" fg:x="2156" fg:w="9"/><text x="6.5528%" y="239.50"></text></g><g><title>neural_networks.exe`neural_networks::matrices::num_sigmoid (9 samples, 0.03%)</title><rect x="6.3028%" y="213" width="0.0263%" height="15" fill="rgb(232,18,1)" fg:x="2156" fg:w="9"/><text x="6.5528%" y="223.50"></text></g><g><title>neural_networks.exe`std::f64::impl$0::powf (9 samples, 0.03%)</title><rect x="6.3028%" y="197" width="0.0263%" height="15" fill="rgb(215,41,42)" fg:x="2156" fg:w="9"/><text x="6.5528%" y="207.50"></text></g><g><title>neural_networks.exe`neural_networks::matrices::Matrix::sigmoid (13 samples, 0.04%)</title><rect x="6.2970%" y="405" width="0.0380%" height="15" fill="rgb(224,123,36)" fg:x="2154" fg:w="13"/><text x="6.5470%" y="415.50"></text></g><g><title>neural_networks.exe`neural_networks::matrices::impl$3::mul (25 samples, 0.07%)</title><rect x="6.3350%" y="405" width="0.0731%" height="15" fill="rgb(240,125,3)" fg:x="2167" fg:w="25"/><text x="6.5850%" y="415.50"></text></g><g><title>neural_networks.exe`neural_networks::matrices::Matrix::mult (25 samples, 0.07%)</title><rect x="6.3350%" y="389" width="0.0731%" height="15" fill="rgb(205,98,50)" fg:x="2167" fg:w="25"/><text x="6.5850%" y="399.50"></text></g><g><title>neural_networks.exe`core::iter::traits::iterator::Iterator::fold(core::ops::range::Range (22 samples, 0.06%)</title><rect x="6.3437%" y="373" width="0.0643%" height="15" fill="rgb(205,185,37)" fg:x="2170" fg:w="22"/><text x="6.5937%" y="383.50"></text></g><g><title>neural_networks.exe`neural_networks::matrices::impl$0::mult::closure$0 (22 samples, 0.06%)</title><rect x="6.3437%" y="357" width="0.0643%" height="15" fill="rgb(238,207,15)" fg:x="2170" fg:w="22"/><text x="6.5937%" y="367.50"></text></g><g><title>neural_networks.exe`alloc::vec::impl$13::index(alloc::vec::Vec (15 samples, 0.04%)</title><rect x="6.3642%" y="341" width="0.0439%" height="15" fill="rgb(213,199,42)" fg:x="2177" fg:w="15"/><text x="6.6142%" y="351.50"></text></g><g><title>`0x7FFFCA0D349E (14 samples, 0.04%)</title><rect x="6.3671%" y="325" width="0.0409%" height="15" fill="rgb(235,201,11)" fg:x="2178" fg:w="14"/><text x="6.6171%" y="335.50"></text></g><g><title>neural_networks.exe`neural_networks::network::NeuralNetwork::check_one (2,014 samples, 5.89%)</title><rect x="0.5233%" y="549" width="5.8877%" height="15" fill="rgb(207,46,11)" fg:x="179" fg:w="2014"/><text x="0.7733%" y="559.50">neural_..</text></g><g><title>neural_networks.exe`neural_networks::network::NeuralNetwork::output (1,988 samples, 5.81%)</title><rect x="0.5993%" y="533" width="5.8117%" height="15" fill="rgb(241,35,35)" fg:x="205" fg:w="1988"/><text x="0.8493%" y="543.50">neural_..</text></g><g><title>neural_networks.exe`core::slice::iter::impl$182::fold(core::slice::iter::Iter (1,988 samples, 5.81%)</title><rect x="0.5993%" y="517" width="5.8117%" height="15" fill="rgb(243,32,47)" fg:x="205" fg:w="1988"/><text x="0.8493%" y="527.50">neural_..</text></g><g><title>neural_networks.exe`neural_networks::network::impl$1::output::closure$0 (42 samples, 0.12%)</title><rect x="6.2882%" y="501" width="0.1228%" height="15" fill="rgb(247,202,23)" fg:x="2151" fg:w="42"/><text x="6.5382%" y="511.50"></text></g><g><title>neural_networks.exe`core::ptr::drop_in_place (42 samples, 0.12%)</title><rect x="6.2882%" y="485" width="0.1228%" height="15" fill="rgb(219,102,11)" fg:x="2151" fg:w="42"/><text x="6.5382%" y="495.50"></text></g><g><title>neural_networks.exe`core::ptr::drop_in_place(alloc::vec::Vec (42 samples, 0.12%)</title><rect x="6.2882%" y="469" width="0.1228%" height="15" fill="rgb(243,110,44)" fg:x="2151" fg:w="42"/><text x="6.5382%" y="479.50"></text></g><g><title>neural_networks.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (42 samples, 0.12%)</title><rect x="6.2882%" y="453" width="0.1228%" height="15" fill="rgb(222,74,54)" fg:x="2151" fg:w="42"/><text x="6.5382%" y="463.50"></text></g><g><title>neural_networks.exe`alloc::raw_vec::impl$3::drop(alloc::raw_vec::RawVec (42 samples, 0.12%)</title><rect x="6.2882%" y="437" width="0.1228%" height="15" fill="rgb(216,99,12)" fg:x="2151" fg:w="42"/><text x="6.5382%" y="447.50"></text></g><g><title>neural_networks.exe`neural_networks::network::Layer::output (40 samples, 0.12%)</title><rect x="6.2940%" y="421" width="0.1169%" height="15" fill="rgb(226,22,26)" fg:x="2153" fg:w="40"/><text x="6.5440%" y="431.50"></text></g><g><title>neural_networks.exe`neural_networks::vec_label (4 samples, 0.01%)</title><rect x="6.4110%" y="549" width="0.0117%" height="15" fill="rgb(217,163,10)" fg:x="2193" fg:w="4"/><text x="6.6610%" y="559.50"></text></g><g><title>neural_networks.exe`core::iter::traits::iterator::Iterator::collect(core::iter::adapters::take::Take&lt;core::iter::sources::repeat_with::RepeatWith (4 samples, 0.01%)</title><rect x="6.4110%" y="533" width="0.0117%" height="15" fill="rgb(213,25,53)" fg:x="2193" fg:w="4"/><text x="6.6610%" y="543.50"></text></g><g><title>neural_networks.exe`alloc::vec::impl$15::from_iter(core::iter::adapters::take::Take&lt;core::iter::sources::repeat_with::RepeatWith (4 samples, 0.01%)</title><rect x="6.4110%" y="517" width="0.0117%" height="15" fill="rgb(252,105,26)" fg:x="2193" fg:w="4"/><text x="6.6610%" y="527.50"></text></g><g><title>neural_networks.exe`alloc::vec::spec_from_iter::impl$0::from_iter(core::iter::adapters::take::Take&lt;core::iter::sources::repeat_with::RepeatWith (4 samples, 0.01%)</title><rect x="6.4110%" y="501" width="0.0117%" height="15" fill="rgb(220,39,43)" fg:x="2193" fg:w="4"/><text x="6.6610%" y="511.50"></text></g><g><title>neural_networks.exe`alloc::vec::spec_from_iter_nested::impl$1::from_iter(core::iter::adapters::take::Take&lt;core::iter::sources::repeat_with::RepeatWith (4 samples, 0.01%)</title><rect x="6.4110%" y="485" width="0.0117%" height="15" fill="rgb(229,68,48)" fg:x="2193" fg:w="4"/><text x="6.6610%" y="495.50"></text></g><g><title>neural_networks.exe`neural_networks::main::test (2,186 samples, 6.39%)</title><rect x="0.0409%" y="565" width="6.3905%" height="15" fill="rgb(252,8,32)" fg:x="14" fg:w="2186"/><text x="0.2909%" y="575.50">neural_n..</text></g><g><title>neural_networks.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::push (309 samples, 0.90%)</title><rect x="6.4607%" y="549" width="0.9033%" height="15" fill="rgb(223,20,43)" fg:x="2210" fg:w="309"/><text x="6.7107%" y="559.50"></text></g><g><title>neural_networks.exe`core::ptr::write (11 samples, 0.03%)</title><rect x="7.3318%" y="533" width="0.0322%" height="15" fill="rgb(229,81,49)" fg:x="2508" fg:w="11"/><text x="7.5818%" y="543.50"></text></g><g><title>`0x7FFFCCA64913 (7 samples, 0.02%)</title><rect x="7.3757%" y="437" width="0.0205%" height="15" fill="rgb(236,28,36)" fg:x="2523" fg:w="7"/><text x="7.6257%" y="447.50"></text></g><g><title>`0x7FFFCCA368C4 (12 samples, 0.04%)</title><rect x="7.3640%" y="469" width="0.0351%" height="15" fill="rgb(249,185,26)" fg:x="2519" fg:w="12"/><text x="7.6140%" y="479.50"></text></g><g><title>`0x7FFFCCA36CF1 (12 samples, 0.04%)</title><rect x="7.3640%" y="453" width="0.0351%" height="15" fill="rgb(249,174,33)" fg:x="2519" fg:w="12"/><text x="7.6140%" y="463.50"></text></g><g><title>neural_networks.exe`core::iter::range::impl$6::next(core::ops::range::Range (12 samples, 0.04%)</title><rect x="7.3991%" y="405" width="0.0351%" height="15" fill="rgb(233,201,37)" fg:x="2531" fg:w="12"/><text x="7.6491%" y="415.50"></text></g><g><title>neural_networks.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (12 samples, 0.04%)</title><rect x="7.3991%" y="389" width="0.0351%" height="15" fill="rgb(221,78,26)" fg:x="2531" fg:w="12"/><text x="7.6491%" y="399.50"></text></g><g><title>neural_networks.exe`core::cmp::impls::impl$58::lt (11 samples, 0.03%)</title><rect x="7.4020%" y="373" width="0.0322%" height="15" fill="rgb(250,127,30)" fg:x="2532" fg:w="11"/><text x="7.6520%" y="383.50"></text></g><g><title>neural_networks.exe`core::intrinsics::copy(alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;*, alloc::vec::Vec (1,107 samples, 3.24%)</title><rect x="7.9867%" y="373" width="3.2362%" height="15" fill="rgb(230,49,44)" fg:x="2732" fg:w="1107"/><text x="8.2367%" y="383.50">neu..</text></g><g><title>neural_networks.exe`core::slice::impl$0::swap(ref_mut$&lt;slice2$&lt;alloc::vec::Vec (1,362 samples, 3.98%)</title><rect x="7.4342%" y="405" width="3.9816%" height="15" fill="rgb(229,67,23)" fg:x="2543" fg:w="1362"/><text x="7.6842%" y="415.50">neur..</text></g><g><title>neural_networks.exe`core::ptr::swap(alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;*, alloc::vec::Vec (1,173 samples, 3.43%)</title><rect x="7.9867%" y="389" width="3.4291%" height="15" fill="rgb(249,83,47)" fg:x="2732" fg:w="1173"/><text x="8.2367%" y="399.50">neu..</text></g><g><title>neural_networks.exe`core::intrinsics::copy_nonoverlapping(alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;*, alloc::vec::Vec (66 samples, 0.19%)</title><rect x="11.2228%" y="373" width="0.1929%" height="15" fill="rgb(215,43,3)" fg:x="3839" fg:w="66"/><text x="11.4728%" y="383.50"></text></g><g><title>neural_networks.exe`rand::distr::uniform::impl$26::is_empty(core::ops::range::RangeTo (8 samples, 0.02%)</title><rect x="12.7050%" y="341" width="0.0234%" height="15" fill="rgb(238,154,13)" fg:x="4346" fg:w="8"/><text x="12.9550%" y="351.50"></text></g><g><title>neural_networks.exe`core::num::impl$8::checked_add (4 samples, 0.01%)</title><rect x="12.7284%" y="293" width="0.0117%" height="15" fill="rgb(219,56,2)" fg:x="4354" fg:w="4"/><text x="12.9784%" y="303.50"></text></g><g><title>neural_networks.exe`rand::distr::utils::impl$5::wmul (149 samples, 0.44%)</title><rect x="12.7401%" y="293" width="0.4356%" height="15" fill="rgb(233,0,4)" fg:x="4358" fg:w="149"/><text x="12.9901%" y="303.50"></text></g><g><title>neural_networks.exe`rand_chacha::guts::refill_wide (23 samples, 0.07%)</title><rect x="13.7165%" y="149" width="0.0672%" height="15" fill="rgb(235,30,7)" fg:x="4692" fg:w="23"/><text x="13.9665%" y="159.50"></text></g><g><title>neural_networks.exe`core::convert::impl$3::into(ppv_lite86::soft::x4&lt;ppv_lite86::x86_64::sse2::u64x2_sse2 (8 samples, 0.02%)</title><rect x="13.8071%" y="85" width="0.0234%" height="15" fill="rgb(250,79,13)" fg:x="4723" fg:w="8"/><text x="14.0571%" y="95.50"></text></g><g><title>neural_networks.exe`ppv_lite86::soft::impl$33::from(ppv_lite86::soft::x4&lt;ppv_lite86::x86_64::sse2::u64x2_sse2 (8 samples, 0.02%)</title><rect x="13.8071%" y="69" width="0.0234%" height="15" fill="rgb(211,146,34)" fg:x="4723" fg:w="8"/><text x="14.0571%" y="79.50"></text></g><g><title>neural_networks.exe`ppv_lite86::x86_64::vec512_storage::new128 (8 samples, 0.02%)</title><rect x="13.8071%" y="53" width="0.0234%" height="15" fill="rgb(228,22,38)" fg:x="4723" fg:w="8"/><text x="14.0571%" y="63.50"></text></g><g><title>neural_networks.exe`rand_chacha::guts::d0123(ppv_lite86::x86_64::Avx2Machine (10 samples, 0.03%)</title><rect x="13.8071%" y="101" width="0.0292%" height="15" fill="rgb(235,168,5)" fg:x="4723" fg:w="10"/><text x="14.0571%" y="111.50"></text></g><g><title>neural_networks.exe`ppv_lite86::soft::impl$18::shuffle_lane_words2301(ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (30 samples, 0.09%)</title><rect x="13.8363%" y="85" width="0.0877%" height="15" fill="rgb(221,155,16)" fg:x="4733" fg:w="30"/><text x="14.0863%" y="95.50"></text></g><g><title>neural_networks.exe`ppv_lite86::x86_64::sse2::avx2::impl$14::shuffle_lane_words2301(ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (30 samples, 0.09%)</title><rect x="13.8363%" y="69" width="0.0877%" height="15" fill="rgb(215,215,53)" fg:x="4733" fg:w="30"/><text x="14.0863%" y="79.50"></text></g><g><title>neural_networks.exe`core::core_arch::x86::avx2::_mm256_shuffle_epi32 (30 samples, 0.09%)</title><rect x="13.8363%" y="53" width="0.0877%" height="15" fill="rgb(223,4,10)" fg:x="4733" fg:w="30"/><text x="14.0863%" y="63.50"></text></g><g><title>neural_networks.exe`rand_chacha::guts::diagonalize(rand_chacha::guts::State&lt;ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (86 samples, 0.25%)</title><rect x="13.8363%" y="101" width="0.2514%" height="15" fill="rgb(234,103,6)" fg:x="4733" fg:w="86"/><text x="14.0863%" y="111.50"></text></g><g><title>neural_networks.exe`ppv_lite86::soft::impl$18::shuffle_lane_words3012(ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (56 samples, 0.16%)</title><rect x="13.9241%" y="85" width="0.1637%" height="15" fill="rgb(227,97,0)" fg:x="4763" fg:w="56"/><text x="14.1741%" y="95.50"></text></g><g><title>neural_networks.exe`ppv_lite86::x86_64::sse2::avx2::impl$14::shuffle_lane_words3012(ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (56 samples, 0.16%)</title><rect x="13.9241%" y="69" width="0.1637%" height="15" fill="rgb(234,150,53)" fg:x="4763" fg:w="56"/><text x="14.1741%" y="79.50"></text></g><g><title>neural_networks.exe`core::core_arch::x86::avx2::_mm256_shuffle_epi32 (56 samples, 0.16%)</title><rect x="13.9241%" y="53" width="0.1637%" height="15" fill="rgb(228,201,54)" fg:x="4763" fg:w="56"/><text x="14.1741%" y="63.50"></text></g><g><title>neural_networks.exe`ppv_lite86::soft::impl$1::rotate_each_word_right16(ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (125 samples, 0.37%)</title><rect x="14.0878%" y="85" width="0.3654%" height="15" fill="rgb(222,22,37)" fg:x="4819" fg:w="125"/><text x="14.3378%" y="95.50"></text></g><g><title>neural_networks.exe`ppv_lite86::x86_64::sse2::avx2::impl$8::rotate_each_word_right16(ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (125 samples, 0.37%)</title><rect x="14.0878%" y="69" width="0.3654%" height="15" fill="rgb(237,53,32)" fg:x="4819" fg:w="125"/><text x="14.3378%" y="79.50"></text></g><g><title>neural_networks.exe`core::core_arch::x86::avx2::_mm256_shuffle_epi8 (125 samples, 0.37%)</title><rect x="14.0878%" y="53" width="0.3654%" height="15" fill="rgb(233,25,53)" fg:x="4819" fg:w="125"/><text x="14.3378%" y="63.50"></text></g><g><title>neural_networks.exe`core::core_arch::x86::avx2::_mm256_or_si256 (103 samples, 0.30%)</title><rect x="14.4532%" y="53" width="0.3011%" height="15" fill="rgb(210,40,34)" fg:x="4944" fg:w="103"/><text x="14.7032%" y="63.50"></text></g><g><title>neural_networks.exe`ppv_lite86::soft::impl$1::rotate_each_word_right20(ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (112 samples, 0.33%)</title><rect x="14.4532%" y="85" width="0.3274%" height="15" fill="rgb(241,220,44)" fg:x="4944" fg:w="112"/><text x="14.7032%" y="95.50"></text></g><g><title>neural_networks.exe`ppv_lite86::x86_64::sse2::avx2::impl$8::rotate_each_word_right20(ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (112 samples, 0.33%)</title><rect x="14.4532%" y="69" width="0.3274%" height="15" fill="rgb(235,28,35)" fg:x="4944" fg:w="112"/><text x="14.7032%" y="79.50"></text></g><g><title>neural_networks.exe`core::core_arch::x86::avx2::_mm256_srli_epi32 (9 samples, 0.03%)</title><rect x="14.7543%" y="53" width="0.0263%" height="15" fill="rgb(210,56,17)" fg:x="5047" fg:w="9"/><text x="15.0043%" y="63.50"></text></g><g><title>neural_networks.exe`ppv_lite86::soft::impl$1::rotate_each_word_right24(ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (67 samples, 0.20%)</title><rect x="14.7806%" y="85" width="0.1959%" height="15" fill="rgb(224,130,29)" fg:x="5056" fg:w="67"/><text x="15.0306%" y="95.50"></text></g><g><title>neural_networks.exe`ppv_lite86::x86_64::sse2::avx2::impl$8::rotate_each_word_right24(ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (67 samples, 0.20%)</title><rect x="14.7806%" y="69" width="0.1959%" height="15" fill="rgb(235,212,8)" fg:x="5056" fg:w="67"/><text x="15.0306%" y="79.50"></text></g><g><title>neural_networks.exe`core::core_arch::x86::avx2::_mm256_shuffle_epi8 (67 samples, 0.20%)</title><rect x="14.7806%" y="53" width="0.1959%" height="15" fill="rgb(223,33,50)" fg:x="5056" fg:w="67"/><text x="15.0306%" y="63.50"></text></g><g><title>neural_networks.exe`ppv_lite86::soft::impl$1::rotate_each_word_right25(ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (106 samples, 0.31%)</title><rect x="14.9765%" y="85" width="0.3099%" height="15" fill="rgb(219,149,13)" fg:x="5123" fg:w="106"/><text x="15.2265%" y="95.50"></text></g><g><title>neural_networks.exe`ppv_lite86::x86_64::sse2::avx2::impl$8::rotate_each_word_right25(ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (106 samples, 0.31%)</title><rect x="14.9765%" y="69" width="0.3099%" height="15" fill="rgb(250,156,29)" fg:x="5123" fg:w="106"/><text x="15.2265%" y="79.50"></text></g><g><title>neural_networks.exe`core::core_arch::x86::avx2::_mm256_or_si256 (106 samples, 0.31%)</title><rect x="14.9765%" y="53" width="0.3099%" height="15" fill="rgb(216,193,19)" fg:x="5123" fg:w="106"/><text x="15.2265%" y="63.50"></text></g><g><title>neural_networks.exe`ppv_lite86::soft::impl$47::bitxor(ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;ppv_lite86::x86_64::NoNI&gt;,ppv_lite86::x86_64::sse2::G0&gt;, ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (57 samples, 0.17%)</title><rect x="15.2863%" y="85" width="0.1666%" height="15" fill="rgb(216,135,14)" fg:x="5229" fg:w="57"/><text x="15.5363%" y="95.50"></text></g><g><title>neural_networks.exe`ppv_lite86::x86_64::sse2::avx2::impl$32::bitxor(ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;ppv_lite86::x86_64::NoNI&gt;, ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (57 samples, 0.17%)</title><rect x="15.2863%" y="69" width="0.1666%" height="15" fill="rgb(241,47,5)" fg:x="5229" fg:w="57"/><text x="15.5363%" y="79.50"></text></g><g><title>neural_networks.exe`core::core_arch::x86::avx2::_mm256_xor_si256 (57 samples, 0.17%)</title><rect x="15.2863%" y="53" width="0.1666%" height="15" fill="rgb(233,42,35)" fg:x="5229" fg:w="57"/><text x="15.5363%" y="63.50"></text></g><g><title>neural_networks.exe`rand_chacha::guts::round(rand_chacha::guts::State&lt;ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (646 samples, 1.89%)</title><rect x="14.0878%" y="101" width="1.8885%" height="15" fill="rgb(231,13,6)" fg:x="4819" fg:w="646"/><text x="14.3378%" y="111.50">n..</text></g><g><title>neural_networks.exe`ppv_lite86::soft::impl$53::add_assign(ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;ppv_lite86::x86_64::NoNI&gt;,ppv_lite86::x86_64::sse2::G0&gt;*, ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (179 samples, 0.52%)</title><rect x="15.4530%" y="85" width="0.5233%" height="15" fill="rgb(207,181,40)" fg:x="5286" fg:w="179"/><text x="15.7030%" y="95.50"></text></g><g><title>neural_networks.exe`ppv_lite86::x86_64::sse2::avx2::impl$31::add_assign(ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;ppv_lite86::x86_64::NoNI&gt;*, ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (179 samples, 0.52%)</title><rect x="15.4530%" y="69" width="0.5233%" height="15" fill="rgb(254,173,49)" fg:x="5286" fg:w="179"/><text x="15.7030%" y="79.50"></text></g><g><title>neural_networks.exe`ppv_lite86::x86_64::sse2::avx2::impl$36::add(ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;ppv_lite86::x86_64::NoNI&gt;, ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (179 samples, 0.52%)</title><rect x="15.4530%" y="53" width="0.5233%" height="15" fill="rgb(221,1,38)" fg:x="5286" fg:w="179"/><text x="15.7030%" y="63.50"></text></g><g><title>neural_networks.exe`core::core_arch::x86::avx2::_mm256_add_epi32 (179 samples, 0.52%)</title><rect x="15.4530%" y="37" width="0.5233%" height="15" fill="rgb(206,124,46)" fg:x="5286" fg:w="179"/><text x="15.7030%" y="47.50"></text></g><g><title>neural_networks.exe`ppv_lite86::soft::impl$18::shuffle_lane_words1230(ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (7 samples, 0.02%)</title><rect x="15.9763%" y="85" width="0.0205%" height="15" fill="rgb(249,21,11)" fg:x="5465" fg:w="7"/><text x="16.2263%" y="95.50"></text></g><g><title>neural_networks.exe`ppv_lite86::x86_64::sse2::avx2::impl$14::shuffle_lane_words1230(ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (7 samples, 0.02%)</title><rect x="15.9763%" y="69" width="0.0205%" height="15" fill="rgb(222,201,40)" fg:x="5465" fg:w="7"/><text x="16.2263%" y="79.50"></text></g><g><title>neural_networks.exe`core::core_arch::x86::avx2::_mm256_shuffle_epi32 (7 samples, 0.02%)</title><rect x="15.9763%" y="53" width="0.0205%" height="15" fill="rgb(235,61,29)" fg:x="5465" fg:w="7"/><text x="16.2263%" y="63.50"></text></g><g><title>neural_networks.exe`ppv_lite86::soft::impl$18::shuffle_lane_words2301(ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (10 samples, 0.03%)</title><rect x="15.9967%" y="85" width="0.0292%" height="15" fill="rgb(219,207,3)" fg:x="5472" fg:w="10"/><text x="16.2467%" y="95.50"></text></g><g><title>neural_networks.exe`ppv_lite86::x86_64::sse2::avx2::impl$14::shuffle_lane_words2301(ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (10 samples, 0.03%)</title><rect x="15.9967%" y="69" width="0.0292%" height="15" fill="rgb(222,56,46)" fg:x="5472" fg:w="10"/><text x="16.2467%" y="79.50"></text></g><g><title>neural_networks.exe`core::core_arch::x86::avx2::_mm256_shuffle_epi32 (10 samples, 0.03%)</title><rect x="15.9967%" y="53" width="0.0292%" height="15" fill="rgb(239,76,54)" fg:x="5472" fg:w="10"/><text x="16.2467%" y="63.50"></text></g><g><title>neural_networks.exe`rand_chacha::guts::refill_wide::impl_avx2 (772 samples, 2.26%)</title><rect x="13.7837%" y="149" width="2.2568%" height="15" fill="rgb(231,124,27)" fg:x="4715" fg:w="772"/><text x="14.0337%" y="159.50">n..</text></g><g><title>neural_networks.exe`rand_chacha::guts::refill_wide::fn_impl(ppv_lite86::x86_64::Avx2Machine (768 samples, 2.25%)</title><rect x="13.7954%" y="133" width="2.2452%" height="15" fill="rgb(249,195,6)" fg:x="4719" fg:w="768"/><text x="14.0454%" y="143.50">n..</text></g><g><title>neural_networks.exe`rand_chacha::guts::refill_wide_impl(ppv_lite86::x86_64::Avx2Machine (768 samples, 2.25%)</title><rect x="13.7954%" y="117" width="2.2452%" height="15" fill="rgb(237,174,47)" fg:x="4719" fg:w="768"/><text x="14.0454%" y="127.50">n..</text></g><g><title>neural_networks.exe`rand_chacha::guts::undiagonalize(rand_chacha::guts::State&lt;ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (22 samples, 0.06%)</title><rect x="15.9763%" y="101" width="0.0643%" height="15" fill="rgb(206,201,31)" fg:x="5465" fg:w="22"/><text x="16.2263%" y="111.50"></text></g><g><title>neural_networks.exe`ppv_lite86::soft::impl$18::shuffle_lane_words3012(ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (5 samples, 0.01%)</title><rect x="16.0260%" y="85" width="0.0146%" height="15" fill="rgb(231,57,52)" fg:x="5482" fg:w="5"/><text x="16.2760%" y="95.50"></text></g><g><title>neural_networks.exe`ppv_lite86::x86_64::sse2::avx2::impl$14::shuffle_lane_words3012(ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (5 samples, 0.01%)</title><rect x="16.0260%" y="69" width="0.0146%" height="15" fill="rgb(248,177,22)" fg:x="5482" fg:w="5"/><text x="16.2760%" y="79.50"></text></g><g><title>neural_networks.exe`core::core_arch::x86::avx2::_mm256_shuffle_epi32 (5 samples, 0.01%)</title><rect x="16.0260%" y="53" width="0.0146%" height="15" fill="rgb(215,211,37)" fg:x="5482" fg:w="5"/><text x="16.2760%" y="63.50"></text></g><g><title>neural_networks.exe`rand::rng::Rng::random_range(rand::rngs::std::StdRng**, core::ops::range::RangeTo (1,150 samples, 3.36%)</title><rect x="12.7050%" y="357" width="3.3619%" height="15" fill="rgb(241,128,51)" fg:x="4346" fg:w="1150"/><text x="12.9550%" y="367.50">neu..</text></g><g><title>neural_networks.exe`rand::distr::uniform::impl$26::sample_single(core::ops::range::RangeTo (1,142 samples, 3.34%)</title><rect x="12.7284%" y="341" width="3.3385%" height="15" fill="rgb(227,165,31)" fg:x="4354" fg:w="1142"/><text x="12.9784%" y="351.50">neu..</text></g><g><title>neural_networks.exe`rand::distr::uniform::int::impl$23::sample_single (1,142 samples, 3.34%)</title><rect x="12.7284%" y="325" width="3.3385%" height="15" fill="rgb(228,167,24)" fg:x="4354" fg:w="1142"/><text x="12.9784%" y="335.50">neu..</text></g><g><title>neural_networks.exe`rand::distr::uniform::int::impl$23::sample_single_inclusive (1,142 samples, 3.34%)</title><rect x="12.7284%" y="309" width="3.3385%" height="15" fill="rgb(228,143,12)" fg:x="4354" fg:w="1142"/><text x="12.9784%" y="319.50">neu..</text></g><g><title>neural_networks.exe`rand::rng::Rng::random (989 samples, 2.89%)</title><rect x="13.1757%" y="293" width="2.8912%" height="15" fill="rgb(249,149,8)" fg:x="4507" fg:w="989"/><text x="13.4257%" y="303.50">ne..</text></g><g><title>neural_networks.exe`rand::distr::integer::impl$2::sample (989 samples, 2.89%)</title><rect x="13.1757%" y="277" width="2.8912%" height="15" fill="rgb(243,35,44)" fg:x="4507" fg:w="989"/><text x="13.4257%" y="287.50">ne..</text></g><g><title>neural_networks.exe`rand_core::impl$0::next_u32 (989 samples, 2.89%)</title><rect x="13.1757%" y="261" width="2.8912%" height="15" fill="rgb(246,89,9)" fg:x="4507" fg:w="989"/><text x="13.4257%" y="271.50">ne..</text></g><g><title>neural_networks.exe`rand::rngs::std::impl$0::next_u32 (989 samples, 2.89%)</title><rect x="13.1757%" y="245" width="2.8912%" height="15" fill="rgb(233,213,13)" fg:x="4507" fg:w="989"/><text x="13.4257%" y="255.50">ne..</text></g><g><title>neural_networks.exe`rand_chacha::chacha::impl$27::next_u32 (989 samples, 2.89%)</title><rect x="13.1757%" y="229" width="2.8912%" height="15" fill="rgb(233,141,41)" fg:x="4507" fg:w="989"/><text x="13.4257%" y="239.50">ne..</text></g><g><title>neural_networks.exe`rand_core::block::impl$2::next_u32(rand_core::block::BlockRng (989 samples, 2.89%)</title><rect x="13.1757%" y="213" width="2.8912%" height="15" fill="rgb(239,167,4)" fg:x="4507" fg:w="989"/><text x="13.4257%" y="223.50">ne..</text></g><g><title>neural_networks.exe`rand_core::block::BlockRng&lt;rand_chacha::chacha::ChaCha12Core&gt;::generate_and_set (808 samples, 2.36%)</title><rect x="13.7048%" y="197" width="2.3621%" height="15" fill="rgb(209,217,16)" fg:x="4688" fg:w="808"/><text x="13.9548%" y="207.50">ne..</text></g><g><title>neural_networks.exe`rand_chacha::chacha::impl$23::generate(rand_chacha::chacha::ChaCha12Core*, rand_chacha::chacha::Array64 (808 samples, 2.36%)</title><rect x="13.7048%" y="181" width="2.3621%" height="15" fill="rgb(219,88,35)" fg:x="4688" fg:w="808"/><text x="13.9548%" y="191.50">ne..</text></g><g><title>neural_networks.exe`rand_chacha::guts::ChaCha::refill4 (808 samples, 2.36%)</title><rect x="13.7048%" y="165" width="2.3621%" height="15" fill="rgb(220,193,23)" fg:x="4688" fg:w="808"/><text x="13.9548%" y="175.50">ne..</text></g><g><title>neural_networks.exe`rand_chacha::guts::refill_wide (9 samples, 0.03%)</title><rect x="16.0406%" y="149" width="0.0263%" height="15" fill="rgb(230,90,52)" fg:x="5487" fg:w="9"/><text x="16.2906%" y="159.50"></text></g><g><title>neural_networks.exe`std_detect::detect::arch::x86::__is_feature_detected::avx2 (9 samples, 0.03%)</title><rect x="16.0406%" y="133" width="0.0263%" height="15" fill="rgb(252,106,19)" fg:x="5487" fg:w="9"/><text x="16.2906%" y="143.50"></text></g><g><title>neural_networks.exe`std_detect::detect::check_for (9 samples, 0.03%)</title><rect x="16.0406%" y="117" width="0.0263%" height="15" fill="rgb(206,74,20)" fg:x="5487" fg:w="9"/><text x="16.2906%" y="127.50"></text></g><g><title>neural_networks.exe`std_detect::detect::cache::test (9 samples, 0.03%)</title><rect x="16.0406%" y="101" width="0.0263%" height="15" fill="rgb(230,138,44)" fg:x="5487" fg:w="9"/><text x="16.2906%" y="111.50"></text></g><g><title>neural_networks.exe`std_detect::detect::cache::Cache::test (9 samples, 0.03%)</title><rect x="16.0406%" y="85" width="0.0263%" height="15" fill="rgb(235,182,43)" fg:x="5487" fg:w="9"/><text x="16.2906%" y="95.50"></text></g><g><title>neural_networks.exe`core::intrinsics::unlikely (11 samples, 0.03%)</title><rect x="16.0698%" y="309" width="0.0322%" height="15" fill="rgb(242,16,51)" fg:x="5497" fg:w="11"/><text x="16.3198%" y="319.50"></text></g><g><title>neural_networks.exe`alloc::alloc::impl$1::allocate (3,072 samples, 8.98%)</title><rect x="7.3991%" y="469" width="8.9806%" height="15" fill="rgb(248,9,4)" fg:x="2531" fg:w="3072"/><text x="7.6491%" y="479.50">neural_networ..</text></g><g><title>neural_networks.exe`alloc::alloc::Global::alloc_impl (3,072 samples, 8.98%)</title><rect x="7.3991%" y="453" width="8.9806%" height="15" fill="rgb(210,31,22)" fg:x="2531" fg:w="3072"/><text x="7.6491%" y="463.50">neural_networ..</text></g><g><title>neural_networks.exe`alloc::alloc::alloc (3,072 samples, 8.98%)</title><rect x="7.3991%" y="437" width="8.9806%" height="15" fill="rgb(239,54,39)" fg:x="2531" fg:w="3072"/><text x="7.6491%" y="447.50">neural_networ..</text></g><g><title>neural_networks.exe`rand::seq::slice::impl$2::partial_shuffle&lt;alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;,rand::rngs::std::StdRng&gt;(ref_mut$&lt;slice2$&lt;alloc::vec::Vec (3,072 samples, 8.98%)</title><rect x="7.3991%" y="421" width="8.9806%" height="15" fill="rgb(230,99,41)" fg:x="2531" fg:w="3072"/><text x="7.6491%" y="431.50">neural_networ..</text></g><g><title>neural_networks.exe`rand::seq::increasing_uniform::IncreasingUniform&lt;ref_mut$&lt;rand::rngs::std::StdRng&gt; &gt;::next_index (1,698 samples, 4.96%)</title><rect x="11.4158%" y="405" width="4.9639%" height="15" fill="rgb(253,106,12)" fg:x="3905" fg:w="1698"/><text x="11.6658%" y="415.50">neural..</text></g><g><title>neural_networks.exe`core::num::impl$6::checked_sub (1,412 samples, 4.13%)</title><rect x="12.2519%" y="389" width="4.1278%" height="15" fill="rgb(213,46,41)" fg:x="4191" fg:w="1412"/><text x="12.5019%" y="399.50">neur..</text></g><g><title>neural_networks.exe`rand::seq::increasing_uniform::impl$0::next_index::closure$0(rand::seq::increasing_uniform::impl$0::next_index::closure_env$0&lt;ref_mut$ (1,257 samples, 3.67%)</title><rect x="12.7050%" y="373" width="3.6747%" height="15" fill="rgb(215,133,35)" fg:x="4346" fg:w="1257"/><text x="12.9550%" y="383.50">neur..</text></g><g><title>neural_networks.exe`rand::seq::increasing_uniform::calculate_bound_u32 (107 samples, 0.31%)</title><rect x="16.0669%" y="357" width="0.3128%" height="15" fill="rgb(213,28,5)" fg:x="5496" fg:w="107"/><text x="16.3169%" y="367.50"></text></g><g><title>neural_networks.exe`rand::seq::increasing_uniform::calculate_bound_u32::inner (106 samples, 0.31%)</title><rect x="16.0698%" y="341" width="0.3099%" height="15" fill="rgb(215,77,49)" fg:x="5497" fg:w="106"/><text x="16.3198%" y="351.50"></text></g><g><title>neural_networks.exe`core::num::impl$8::checked_mul (106 samples, 0.31%)</title><rect x="16.0698%" y="325" width="0.3099%" height="15" fill="rgb(248,100,22)" fg:x="5497" fg:w="106"/><text x="16.3198%" y="335.50"></text></g><g><title>neural_networks.exe`core::num::impl$8::overflowing_mul (95 samples, 0.28%)</title><rect x="16.1020%" y="309" width="0.2777%" height="15" fill="rgb(208,67,9)" fg:x="5508" fg:w="95"/><text x="16.3520%" y="319.50"></text></g><g><title>neural_networks.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::with_capacity (3,087 samples, 9.02%)</title><rect x="7.3640%" y="549" width="9.0245%" height="15" fill="rgb(219,133,21)" fg:x="2519" fg:w="3087"/><text x="7.6140%" y="559.50">neural_networ..</text></g><g><title>neural_networks.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (3,087 samples, 9.02%)</title><rect x="7.3640%" y="533" width="9.0245%" height="15" fill="rgb(246,46,29)" fg:x="2519" fg:w="3087"/><text x="7.6140%" y="543.50">neural_networ..</text></g><g><title>neural_networks.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (3,087 samples, 9.02%)</title><rect x="7.3640%" y="517" width="9.0245%" height="15" fill="rgb(246,185,52)" fg:x="2519" fg:w="3087"/><text x="7.6140%" y="527.50">neural_networ..</text></g><g><title>neural_networks.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (3,087 samples, 9.02%)</title><rect x="7.3640%" y="501" width="9.0245%" height="15" fill="rgb(252,136,11)" fg:x="2519" fg:w="3087"/><text x="7.6140%" y="511.50">neural_networ..</text></g><g><title>neural_networks.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (3,087 samples, 9.02%)</title><rect x="7.3640%" y="485" width="9.0245%" height="15" fill="rgb(219,138,53)" fg:x="2519" fg:w="3087"/><text x="7.6140%" y="495.50">neural_networ..</text></g><g><title>neural_networks.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (35 samples, 0.10%)</title><rect x="16.3885%" y="533" width="0.1023%" height="15" fill="rgb(211,51,23)" fg:x="5606" fg:w="35"/><text x="16.6385%" y="543.50"></text></g><g><title>neural_networks.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$ (35 samples, 0.10%)</title><rect x="16.3885%" y="517" width="0.1023%" height="15" fill="rgb(247,221,28)" fg:x="5606" fg:w="35"/><text x="16.6385%" y="527.50"></text></g><g><title>neural_networks.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;alloc::vec::Vec (42 samples, 0.12%)</title><rect x="16.3885%" y="549" width="0.1228%" height="15" fill="rgb(251,222,45)" fg:x="5606" fg:w="42"/><text x="16.6385%" y="559.50"></text></g><g><title>neural_networks.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;alloc::vec::Vec (5 samples, 0.01%)</title><rect x="16.4966%" y="533" width="0.0146%" height="15" fill="rgb(217,162,53)" fg:x="5643" fg:w="5"/><text x="16.7466%" y="543.50"></text></g><g><title>neural_networks.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;alloc::vec::Vec (5 samples, 0.01%)</title><rect x="16.4966%" y="517" width="0.0146%" height="15" fill="rgb(229,93,14)" fg:x="5643" fg:w="5"/><text x="16.7466%" y="527.50"></text></g><g><title>neural_networks.exe`core::iter::traits::iterator::Iterator::for_each::call::closure$0(core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;f64,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;u8,alloc::alloc::Global&gt;,neural_networks::main::test::closure_env$0&gt; &gt; &gt;*, tuple$ (193 samples, 0.56%)</title><rect x="16.5142%" y="357" width="0.5642%" height="15" fill="rgb(209,67,49)" fg:x="5649" fg:w="193"/><text x="16.7642%" y="367.50"></text></g><g><title>neural_networks.exe`alloc::vec::impl$20::extend_trusted::closure$0(alloc::vec::impl$20::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter (193 samples, 0.56%)</title><rect x="16.5142%" y="341" width="0.5642%" height="15" fill="rgb(213,87,29)" fg:x="5649" fg:w="193"/><text x="16.7642%" y="351.50"></text></g><g><title>neural_networks.exe`core::ptr::write (193 samples, 0.56%)</title><rect x="16.5142%" y="325" width="0.5642%" height="15" fill="rgb(205,151,52)" fg:x="5649" fg:w="193"/><text x="16.7642%" y="335.50"></text></g><g><title>neural_networks.exe`core::iter::adapters::map::map_fold::closure$0(core::iter::adapters::map::map_fold::closure_env$0&lt;u8,f64,tuple$&lt;&gt;,neural_networks::main::test::closure_env$0,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;f64,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;u8,alloc::alloc::Global&gt;,neural_networks::main::test::closure_env$0&gt; &gt; &gt; &gt;*, tuple$ (255 samples, 0.75%)</title><rect x="16.5142%" y="373" width="0.7455%" height="15" fill="rgb(253,215,39)" fg:x="5649" fg:w="255"/><text x="16.7642%" y="383.50"></text></g><g><title>neural_networks.exe`neural_networks::main::test::closure$0 (62 samples, 0.18%)</title><rect x="17.0784%" y="357" width="0.1812%" height="15" fill="rgb(221,220,41)" fg:x="5842" fg:w="62"/><text x="17.3284%" y="367.50"></text></g><g><title>neural_networks.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;*, core::ops::range::RangeFrom (282 samples, 0.82%)</title><rect x="16.5112%" y="549" width="0.8244%" height="15" fill="rgb(218,133,21)" fg:x="5648" fg:w="282"/><text x="16.7612%" y="559.50"></text></g><g><title>neural_networks.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (282 samples, 0.82%)</title><rect x="16.5112%" y="533" width="0.8244%" height="15" fill="rgb(221,193,43)" fg:x="5648" fg:w="282"/><text x="16.7612%" y="543.50"></text></g><g><title>neural_networks.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::as_slice (282 samples, 0.82%)</title><rect x="16.5112%" y="517" width="0.8244%" height="15" fill="rgb(240,128,52)" fg:x="5648" fg:w="282"/><text x="16.7612%" y="527.50"></text></g><g><title>neural_networks.exe`alloc::vec::in_place_collect::impl$1::from_iter&lt;f64,core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;u8,alloc::alloc::Global&gt;,neural_networks::main::test::closure_env$0&gt; &gt;(core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter (282 samples, 0.82%)</title><rect x="16.5112%" y="501" width="0.8244%" height="15" fill="rgb(253,114,12)" fg:x="5648" fg:w="282"/><text x="16.7612%" y="511.50"></text></g><g><title>neural_networks.exe`alloc::vec::spec_from_iter_nested::impl$1::from_iter(core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter (282 samples, 0.82%)</title><rect x="16.5112%" y="485" width="0.8244%" height="15" fill="rgb(215,223,47)" fg:x="5648" fg:w="282"/><text x="16.7612%" y="495.50"></text></g><g><title>neural_networks.exe`alloc::vec::spec_from_iter_nested::impl$1::from_iter(core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter (282 samples, 0.82%)</title><rect x="16.5112%" y="469" width="0.8244%" height="15" fill="rgb(248,225,23)" fg:x="5648" fg:w="282"/><text x="16.7612%" y="479.50"></text></g><g><title>neural_networks.exe`alloc::vec::spec_extend::impl$1::spec_extend(alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;*, core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter (281 samples, 0.82%)</title><rect x="16.5142%" y="453" width="0.8215%" height="15" fill="rgb(250,108,0)" fg:x="5649" fg:w="281"/><text x="16.7642%" y="463.50"></text></g><g><title>neural_networks.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::extend_trusted(core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter (281 samples, 0.82%)</title><rect x="16.5142%" y="437" width="0.8215%" height="15" fill="rgb(228,208,7)" fg:x="5649" fg:w="281"/><text x="16.7642%" y="447.50"></text></g><g><title>neural_networks.exe`core::iter::traits::iterator::Iterator::for_each(core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;u8,alloc::alloc::Global&gt;,neural_networks::main::test::closure_env$0&gt;, alloc::vec::impl$20::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter (281 samples, 0.82%)</title><rect x="16.5142%" y="421" width="0.8215%" height="15" fill="rgb(244,45,10)" fg:x="5649" fg:w="281"/><text x="16.7642%" y="431.50"></text></g><g><title>neural_networks.exe`core::iter::adapters::map::impl$2::fold(core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;u8,alloc::alloc::Global&gt;,neural_networks::main::test::closure_env$0&gt;, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;f64,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter (281 samples, 0.82%)</title><rect x="16.5142%" y="405" width="0.8215%" height="15" fill="rgb(207,125,25)" fg:x="5649" fg:w="281"/><text x="16.7642%" y="415.50"></text></g><g><title>neural_networks.exe`alloc::vec::into_iter::impl$5::fold(alloc::vec::into_iter::IntoIter&lt;u8,alloc::alloc::Global&gt;, tuple$&lt;&gt;, core::iter::adapters::map::map_fold::closure_env$0&lt;u8,f64,tuple$&lt;&gt;,neural_networks::main::test::closure_env$0,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;f64,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter (281 samples, 0.82%)</title><rect x="16.5142%" y="389" width="0.8215%" height="15" fill="rgb(210,195,18)" fg:x="5649" fg:w="281"/><text x="16.7642%" y="399.50"></text></g><g><title>neural_networks.exe`core::ptr::non_null::NonNull&lt;u8&gt;::read(core::ptr::non_null::NonNull (26 samples, 0.08%)</title><rect x="17.2596%" y="373" width="0.0760%" height="15" fill="rgb(249,80,12)" fg:x="5904" fg:w="26"/><text x="17.5096%" y="383.50"></text></g><g><title>neural_networks.exe`core::ptr::read (26 samples, 0.08%)</title><rect x="17.2596%" y="357" width="0.0760%" height="15" fill="rgb(221,65,9)" fg:x="5904" fg:w="26"/><text x="17.5096%" y="367.50"></text></g><g><title>neural_networks.exe`core::iter::range::impl$6::next(core::ops::range::Range (12 samples, 0.04%)</title><rect x="17.3356%" y="501" width="0.0351%" height="15" fill="rgb(235,49,36)" fg:x="5930" fg:w="12"/><text x="17.5856%" y="511.50"></text></g><g><title>neural_networks.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (12 samples, 0.04%)</title><rect x="17.3356%" y="485" width="0.0351%" height="15" fill="rgb(225,32,20)" fg:x="5930" fg:w="12"/><text x="17.5856%" y="495.50"></text></g><g><title>neural_networks.exe`core::cmp::impls::impl$58::lt (12 samples, 0.04%)</title><rect x="17.3356%" y="469" width="0.0351%" height="15" fill="rgb(215,141,46)" fg:x="5930" fg:w="12"/><text x="17.5856%" y="479.50"></text></g><g><title>neural_networks.exe`core::intrinsics::copy(alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;*, alloc::vec::Vec (1,175 samples, 3.43%)</title><rect x="17.9495%" y="469" width="3.4350%" height="15" fill="rgb(250,160,47)" fg:x="6140" fg:w="1175"/><text x="18.1995%" y="479.50">neu..</text></g><g><title>neural_networks.exe`core::slice::impl$0::swap(ref_mut$&lt;slice2$&lt;alloc::vec::Vec (1,453 samples, 4.25%)</title><rect x="17.3707%" y="501" width="4.2477%" height="15" fill="rgb(216,222,40)" fg:x="5942" fg:w="1453"/><text x="17.6207%" y="511.50">neura..</text></g><g><title>neural_networks.exe`core::ptr::swap(alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;*, alloc::vec::Vec (1,255 samples, 3.67%)</title><rect x="17.9495%" y="485" width="3.6688%" height="15" fill="rgb(234,217,39)" fg:x="6140" fg:w="1255"/><text x="18.1995%" y="495.50">neur..</text></g><g><title>neural_networks.exe`core::intrinsics::copy_nonoverlapping(alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;*, alloc::vec::Vec (80 samples, 0.23%)</title><rect x="21.3845%" y="469" width="0.2339%" height="15" fill="rgb(207,178,40)" fg:x="7315" fg:w="80"/><text x="21.6345%" y="479.50"></text></g><g><title>neural_networks.exe`rand::distr::uniform::impl$26::is_empty(core::ops::range::RangeTo (13 samples, 0.04%)</title><rect x="23.0245%" y="437" width="0.0380%" height="15" fill="rgb(221,136,13)" fg:x="7876" fg:w="13"/><text x="23.2745%" y="447.50"></text></g><g><title>neural_networks.exe`rand::distr::utils::impl$5::wmul (158 samples, 0.46%)</title><rect x="23.0655%" y="389" width="0.4619%" height="15" fill="rgb(249,199,10)" fg:x="7890" fg:w="158"/><text x="23.3155%" y="399.50"></text></g><g><title>neural_networks.exe`rand_chacha::guts::refill_wide (27 samples, 0.08%)</title><rect x="24.0857%" y="245" width="0.0789%" height="15" fill="rgb(249,222,13)" fg:x="8239" fg:w="27"/><text x="24.3357%" y="255.50"></text></g><g><title>neural_networks.exe`core::iter::range::impl$6::next(core::ops::range::Range (5 samples, 0.01%)</title><rect x="24.1676%" y="197" width="0.0146%" height="15" fill="rgb(244,185,38)" fg:x="8267" fg:w="5"/><text x="24.4176%" y="207.50"></text></g><g><title>neural_networks.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (5 samples, 0.01%)</title><rect x="24.1676%" y="181" width="0.0146%" height="15" fill="rgb(236,202,9)" fg:x="8267" fg:w="5"/><text x="24.4176%" y="191.50"></text></g><g><title>neural_networks.exe`rand_chacha::guts::d0123(ppv_lite86::x86_64::Avx2Machine (8 samples, 0.02%)</title><rect x="24.1968%" y="197" width="0.0234%" height="15" fill="rgb(250,229,37)" fg:x="8277" fg:w="8"/><text x="24.4468%" y="207.50"></text></g><g><title>neural_networks.exe`core::convert::impl$3::into(ppv_lite86::soft::x4&lt;ppv_lite86::x86_64::sse2::u64x2_sse2 (8 samples, 0.02%)</title><rect x="24.1968%" y="181" width="0.0234%" height="15" fill="rgb(206,174,23)" fg:x="8277" fg:w="8"/><text x="24.4468%" y="191.50"></text></g><g><title>neural_networks.exe`ppv_lite86::soft::impl$33::from(ppv_lite86::soft::x4&lt;ppv_lite86::x86_64::sse2::u64x2_sse2 (8 samples, 0.02%)</title><rect x="24.1968%" y="165" width="0.0234%" height="15" fill="rgb(211,33,43)" fg:x="8277" fg:w="8"/><text x="24.4468%" y="175.50"></text></g><g><title>neural_networks.exe`ppv_lite86::x86_64::vec512_storage::new128 (8 samples, 0.02%)</title><rect x="24.1968%" y="149" width="0.0234%" height="15" fill="rgb(245,58,50)" fg:x="8277" fg:w="8"/><text x="24.4468%" y="159.50"></text></g><g><title>neural_networks.exe`ppv_lite86::soft::impl$18::shuffle_lane_words2301(ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (26 samples, 0.08%)</title><rect x="24.2202%" y="181" width="0.0760%" height="15" fill="rgb(244,68,36)" fg:x="8285" fg:w="26"/><text x="24.4702%" y="191.50"></text></g><g><title>neural_networks.exe`ppv_lite86::x86_64::sse2::avx2::impl$14::shuffle_lane_words2301(ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (26 samples, 0.08%)</title><rect x="24.2202%" y="165" width="0.0760%" height="15" fill="rgb(232,229,15)" fg:x="8285" fg:w="26"/><text x="24.4702%" y="175.50"></text></g><g><title>neural_networks.exe`core::core_arch::x86::avx2::_mm256_shuffle_epi32 (26 samples, 0.08%)</title><rect x="24.2202%" y="149" width="0.0760%" height="15" fill="rgb(254,30,23)" fg:x="8285" fg:w="26"/><text x="24.4702%" y="159.50"></text></g><g><title>neural_networks.exe`rand_chacha::guts::diagonalize(rand_chacha::guts::State&lt;ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (67 samples, 0.20%)</title><rect x="24.2202%" y="197" width="0.1959%" height="15" fill="rgb(235,160,14)" fg:x="8285" fg:w="67"/><text x="24.4702%" y="207.50"></text></g><g><title>neural_networks.exe`ppv_lite86::soft::impl$18::shuffle_lane_words3012(ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (41 samples, 0.12%)</title><rect x="24.2962%" y="181" width="0.1199%" height="15" fill="rgb(212,155,44)" fg:x="8311" fg:w="41"/><text x="24.5462%" y="191.50"></text></g><g><title>neural_networks.exe`ppv_lite86::x86_64::sse2::avx2::impl$14::shuffle_lane_words3012(ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (41 samples, 0.12%)</title><rect x="24.2962%" y="165" width="0.1199%" height="15" fill="rgb(226,2,50)" fg:x="8311" fg:w="41"/><text x="24.5462%" y="175.50"></text></g><g><title>neural_networks.exe`core::core_arch::x86::avx2::_mm256_shuffle_epi32 (41 samples, 0.12%)</title><rect x="24.2962%" y="149" width="0.1199%" height="15" fill="rgb(234,177,6)" fg:x="8311" fg:w="41"/><text x="24.5462%" y="159.50"></text></g><g><title>neural_networks.exe`ppv_lite86::soft::impl$1::rotate_each_word_right16(ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (137 samples, 0.40%)</title><rect x="24.4161%" y="181" width="0.4005%" height="15" fill="rgb(217,24,9)" fg:x="8352" fg:w="137"/><text x="24.6661%" y="191.50"></text></g><g><title>neural_networks.exe`ppv_lite86::x86_64::sse2::avx2::impl$8::rotate_each_word_right16(ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (137 samples, 0.40%)</title><rect x="24.4161%" y="165" width="0.4005%" height="15" fill="rgb(220,13,46)" fg:x="8352" fg:w="137"/><text x="24.6661%" y="175.50"></text></g><g><title>neural_networks.exe`core::core_arch::x86::avx2::_mm256_shuffle_epi8 (137 samples, 0.40%)</title><rect x="24.4161%" y="149" width="0.4005%" height="15" fill="rgb(239,221,27)" fg:x="8352" fg:w="137"/><text x="24.6661%" y="159.50"></text></g><g><title>neural_networks.exe`core::core_arch::x86::avx2::_mm256_or_si256 (88 samples, 0.26%)</title><rect x="24.8166%" y="149" width="0.2573%" height="15" fill="rgb(222,198,25)" fg:x="8489" fg:w="88"/><text x="25.0666%" y="159.50"></text></g><g><title>neural_networks.exe`ppv_lite86::soft::impl$1::rotate_each_word_right20(ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (97 samples, 0.28%)</title><rect x="24.8166%" y="181" width="0.2836%" height="15" fill="rgb(211,99,13)" fg:x="8489" fg:w="97"/><text x="25.0666%" y="191.50"></text></g><g><title>neural_networks.exe`ppv_lite86::x86_64::sse2::avx2::impl$8::rotate_each_word_right20(ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (97 samples, 0.28%)</title><rect x="24.8166%" y="165" width="0.2836%" height="15" fill="rgb(232,111,31)" fg:x="8489" fg:w="97"/><text x="25.0666%" y="175.50"></text></g><g><title>neural_networks.exe`core::core_arch::x86::avx2::_mm256_srli_epi32 (9 samples, 0.03%)</title><rect x="25.0738%" y="149" width="0.0263%" height="15" fill="rgb(245,82,37)" fg:x="8577" fg:w="9"/><text x="25.3238%" y="159.50"></text></g><g><title>neural_networks.exe`ppv_lite86::soft::impl$1::rotate_each_word_right24(ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (53 samples, 0.15%)</title><rect x="25.1001%" y="181" width="0.1549%" height="15" fill="rgb(227,149,46)" fg:x="8586" fg:w="53"/><text x="25.3501%" y="191.50"></text></g><g><title>neural_networks.exe`ppv_lite86::x86_64::sse2::avx2::impl$8::rotate_each_word_right24(ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (53 samples, 0.15%)</title><rect x="25.1001%" y="165" width="0.1549%" height="15" fill="rgb(218,36,50)" fg:x="8586" fg:w="53"/><text x="25.3501%" y="175.50"></text></g><g><title>neural_networks.exe`core::core_arch::x86::avx2::_mm256_shuffle_epi8 (53 samples, 0.15%)</title><rect x="25.1001%" y="149" width="0.1549%" height="15" fill="rgb(226,80,48)" fg:x="8586" fg:w="53"/><text x="25.3501%" y="159.50"></text></g><g><title>neural_networks.exe`ppv_lite86::soft::impl$1::rotate_each_word_right25(ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (87 samples, 0.25%)</title><rect x="25.2551%" y="181" width="0.2543%" height="15" fill="rgb(238,224,15)" fg:x="8639" fg:w="87"/><text x="25.5051%" y="191.50"></text></g><g><title>neural_networks.exe`ppv_lite86::x86_64::sse2::avx2::impl$8::rotate_each_word_right25(ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (87 samples, 0.25%)</title><rect x="25.2551%" y="165" width="0.2543%" height="15" fill="rgb(241,136,10)" fg:x="8639" fg:w="87"/><text x="25.5051%" y="175.50"></text></g><g><title>neural_networks.exe`core::core_arch::x86::avx2::_mm256_or_si256 (87 samples, 0.25%)</title><rect x="25.2551%" y="149" width="0.2543%" height="15" fill="rgb(208,32,45)" fg:x="8639" fg:w="87"/><text x="25.5051%" y="159.50"></text></g><g><title>neural_networks.exe`ppv_lite86::soft::impl$47::bitxor(ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;ppv_lite86::x86_64::NoNI&gt;,ppv_lite86::x86_64::sse2::G0&gt;, ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (48 samples, 0.14%)</title><rect x="25.5094%" y="181" width="0.1403%" height="15" fill="rgb(207,135,9)" fg:x="8726" fg:w="48"/><text x="25.7594%" y="191.50"></text></g><g><title>neural_networks.exe`ppv_lite86::x86_64::sse2::avx2::impl$32::bitxor(ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;ppv_lite86::x86_64::NoNI&gt;, ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (48 samples, 0.14%)</title><rect x="25.5094%" y="165" width="0.1403%" height="15" fill="rgb(206,86,44)" fg:x="8726" fg:w="48"/><text x="25.7594%" y="175.50"></text></g><g><title>neural_networks.exe`core::core_arch::x86::avx2::_mm256_xor_si256 (48 samples, 0.14%)</title><rect x="25.5094%" y="149" width="0.1403%" height="15" fill="rgb(245,177,15)" fg:x="8726" fg:w="48"/><text x="25.7594%" y="159.50"></text></g><g><title>neural_networks.exe`rand_chacha::guts::round(rand_chacha::guts::State&lt;ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (588 samples, 1.72%)</title><rect x="24.4161%" y="197" width="1.7189%" height="15" fill="rgb(206,64,50)" fg:x="8352" fg:w="588"/><text x="24.6661%" y="207.50"></text></g><g><title>neural_networks.exe`ppv_lite86::soft::impl$53::add_assign(ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;ppv_lite86::x86_64::NoNI&gt;,ppv_lite86::x86_64::sse2::G0&gt;*, ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (166 samples, 0.49%)</title><rect x="25.6497%" y="181" width="0.4853%" height="15" fill="rgb(234,36,40)" fg:x="8774" fg:w="166"/><text x="25.8997%" y="191.50"></text></g><g><title>neural_networks.exe`ppv_lite86::x86_64::sse2::avx2::impl$31::add_assign(ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;ppv_lite86::x86_64::NoNI&gt;*, ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (166 samples, 0.49%)</title><rect x="25.6497%" y="165" width="0.4853%" height="15" fill="rgb(213,64,8)" fg:x="8774" fg:w="166"/><text x="25.8997%" y="175.50"></text></g><g><title>neural_networks.exe`ppv_lite86::x86_64::sse2::avx2::impl$36::add(ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;ppv_lite86::x86_64::NoNI&gt;, ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (166 samples, 0.49%)</title><rect x="25.6497%" y="149" width="0.4853%" height="15" fill="rgb(210,75,36)" fg:x="8774" fg:w="166"/><text x="25.8997%" y="159.50"></text></g><g><title>neural_networks.exe`core::core_arch::x86::avx2::_mm256_add_epi32 (166 samples, 0.49%)</title><rect x="25.6497%" y="133" width="0.4853%" height="15" fill="rgb(229,88,21)" fg:x="8774" fg:w="166"/><text x="25.8997%" y="143.50"></text></g><g><title>neural_networks.exe`ppv_lite86::soft::impl$18::shuffle_lane_words1230(ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (6 samples, 0.02%)</title><rect x="26.1350%" y="181" width="0.0175%" height="15" fill="rgb(252,204,47)" fg:x="8940" fg:w="6"/><text x="26.3850%" y="191.50"></text></g><g><title>neural_networks.exe`ppv_lite86::x86_64::sse2::avx2::impl$14::shuffle_lane_words1230(ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (6 samples, 0.02%)</title><rect x="26.1350%" y="165" width="0.0175%" height="15" fill="rgb(208,77,27)" fg:x="8940" fg:w="6"/><text x="26.3850%" y="175.50"></text></g><g><title>neural_networks.exe`core::core_arch::x86::avx2::_mm256_shuffle_epi32 (6 samples, 0.02%)</title><rect x="26.1350%" y="149" width="0.0175%" height="15" fill="rgb(221,76,26)" fg:x="8940" fg:w="6"/><text x="26.3850%" y="159.50"></text></g><g><title>neural_networks.exe`ppv_lite86::soft::impl$18::shuffle_lane_words2301(ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (11 samples, 0.03%)</title><rect x="26.1525%" y="181" width="0.0322%" height="15" fill="rgb(225,139,18)" fg:x="8946" fg:w="11"/><text x="26.4025%" y="191.50"></text></g><g><title>neural_networks.exe`ppv_lite86::x86_64::sse2::avx2::impl$14::shuffle_lane_words2301(ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (11 samples, 0.03%)</title><rect x="26.1525%" y="165" width="0.0322%" height="15" fill="rgb(230,137,11)" fg:x="8946" fg:w="11"/><text x="26.4025%" y="175.50"></text></g><g><title>neural_networks.exe`core::core_arch::x86::avx2::_mm256_shuffle_epi32 (11 samples, 0.03%)</title><rect x="26.1525%" y="149" width="0.0322%" height="15" fill="rgb(212,28,1)" fg:x="8946" fg:w="11"/><text x="26.4025%" y="159.50"></text></g><g><title>neural_networks.exe`rand_chacha::guts::refill_wide::impl_avx2 (698 samples, 2.04%)</title><rect x="24.1646%" y="245" width="2.0405%" height="15" fill="rgb(248,164,17)" fg:x="8266" fg:w="698"/><text x="24.4146%" y="255.50">n..</text></g><g><title>neural_networks.exe`rand_chacha::guts::refill_wide::fn_impl(ppv_lite86::x86_64::Avx2Machine (697 samples, 2.04%)</title><rect x="24.1676%" y="229" width="2.0376%" height="15" fill="rgb(222,171,42)" fg:x="8267" fg:w="697"/><text x="24.4176%" y="239.50">n..</text></g><g><title>neural_networks.exe`rand_chacha::guts::refill_wide_impl(ppv_lite86::x86_64::Avx2Machine (697 samples, 2.04%)</title><rect x="24.1676%" y="213" width="2.0376%" height="15" fill="rgb(243,84,45)" fg:x="8267" fg:w="697"/><text x="24.4176%" y="223.50">n..</text></g><g><title>neural_networks.exe`rand_chacha::guts::undiagonalize(rand_chacha::guts::State&lt;ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (24 samples, 0.07%)</title><rect x="26.1350%" y="197" width="0.0702%" height="15" fill="rgb(252,49,23)" fg:x="8940" fg:w="24"/><text x="26.3850%" y="207.50"></text></g><g><title>neural_networks.exe`ppv_lite86::soft::impl$18::shuffle_lane_words3012(ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (7 samples, 0.02%)</title><rect x="26.1847%" y="181" width="0.0205%" height="15" fill="rgb(215,19,7)" fg:x="8957" fg:w="7"/><text x="26.4347%" y="191.50"></text></g><g><title>neural_networks.exe`ppv_lite86::x86_64::sse2::avx2::impl$14::shuffle_lane_words3012(ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (7 samples, 0.02%)</title><rect x="26.1847%" y="165" width="0.0205%" height="15" fill="rgb(238,81,41)" fg:x="8957" fg:w="7"/><text x="26.4347%" y="175.50"></text></g><g><title>neural_networks.exe`core::core_arch::x86::avx2::_mm256_shuffle_epi32 (7 samples, 0.02%)</title><rect x="26.1847%" y="149" width="0.0205%" height="15" fill="rgb(210,199,37)" fg:x="8957" fg:w="7"/><text x="26.4347%" y="159.50"></text></g><g><title>neural_networks.exe`rand::rng::Rng::random_range(rand::rngs::std::StdRng**, core::ops::range::RangeTo (1,092 samples, 3.19%)</title><rect x="23.0245%" y="453" width="3.1923%" height="15" fill="rgb(244,192,49)" fg:x="7876" fg:w="1092"/><text x="23.2745%" y="463.50">neu..</text></g><g><title>neural_networks.exe`rand::distr::uniform::impl$26::sample_single(core::ops::range::RangeTo (1,079 samples, 3.15%)</title><rect x="23.0625%" y="437" width="3.1543%" height="15" fill="rgb(226,211,11)" fg:x="7889" fg:w="1079"/><text x="23.3125%" y="447.50">neu..</text></g><g><title>neural_networks.exe`rand::distr::uniform::int::impl$23::sample_single (1,079 samples, 3.15%)</title><rect x="23.0625%" y="421" width="3.1543%" height="15" fill="rgb(236,162,54)" fg:x="7889" fg:w="1079"/><text x="23.3125%" y="431.50">neu..</text></g><g><title>neural_networks.exe`rand::distr::uniform::int::impl$23::sample_single_inclusive (1,079 samples, 3.15%)</title><rect x="23.0625%" y="405" width="3.1543%" height="15" fill="rgb(220,229,9)" fg:x="7889" fg:w="1079"/><text x="23.3125%" y="415.50">neu..</text></g><g><title>neural_networks.exe`rand::rng::Rng::random (920 samples, 2.69%)</title><rect x="23.5273%" y="389" width="2.6895%" height="15" fill="rgb(250,87,22)" fg:x="8048" fg:w="920"/><text x="23.7773%" y="399.50">ne..</text></g><g><title>neural_networks.exe`rand::distr::integer::impl$2::sample (920 samples, 2.69%)</title><rect x="23.5273%" y="373" width="2.6895%" height="15" fill="rgb(239,43,17)" fg:x="8048" fg:w="920"/><text x="23.7773%" y="383.50">ne..</text></g><g><title>neural_networks.exe`rand_core::impl$0::next_u32 (920 samples, 2.69%)</title><rect x="23.5273%" y="357" width="2.6895%" height="15" fill="rgb(231,177,25)" fg:x="8048" fg:w="920"/><text x="23.7773%" y="367.50">ne..</text></g><g><title>neural_networks.exe`rand::rngs::std::impl$0::next_u32 (920 samples, 2.69%)</title><rect x="23.5273%" y="341" width="2.6895%" height="15" fill="rgb(219,179,1)" fg:x="8048" fg:w="920"/><text x="23.7773%" y="351.50">ne..</text></g><g><title>neural_networks.exe`rand_chacha::chacha::impl$27::next_u32 (920 samples, 2.69%)</title><rect x="23.5273%" y="325" width="2.6895%" height="15" fill="rgb(238,219,53)" fg:x="8048" fg:w="920"/><text x="23.7773%" y="335.50">ne..</text></g><g><title>neural_networks.exe`rand_core::block::impl$2::next_u32(rand_core::block::BlockRng (920 samples, 2.69%)</title><rect x="23.5273%" y="309" width="2.6895%" height="15" fill="rgb(232,167,36)" fg:x="8048" fg:w="920"/><text x="23.7773%" y="319.50">ne..</text></g><g><title>neural_networks.exe`rand_core::block::BlockRng&lt;rand_chacha::chacha::ChaCha12Core&gt;::generate_and_set (734 samples, 2.15%)</title><rect x="24.0711%" y="293" width="2.1458%" height="15" fill="rgb(244,19,51)" fg:x="8234" fg:w="734"/><text x="24.3211%" y="303.50">n..</text></g><g><title>neural_networks.exe`rand_chacha::chacha::impl$23::generate(rand_chacha::chacha::ChaCha12Core*, rand_chacha::chacha::Array64 (734 samples, 2.15%)</title><rect x="24.0711%" y="277" width="2.1458%" height="15" fill="rgb(224,6,22)" fg:x="8234" fg:w="734"/><text x="24.3211%" y="287.50">n..</text></g><g><title>neural_networks.exe`rand_chacha::guts::ChaCha::refill4 (734 samples, 2.15%)</title><rect x="24.0711%" y="261" width="2.1458%" height="15" fill="rgb(224,145,5)" fg:x="8234" fg:w="734"/><text x="24.3211%" y="271.50">n..</text></g><g><title>neural_networks.exe`rand_chacha::guts::refill_wide (4 samples, 0.01%)</title><rect x="26.2052%" y="245" width="0.0117%" height="15" fill="rgb(234,130,49)" fg:x="8964" fg:w="4"/><text x="26.4552%" y="255.50"></text></g><g><title>neural_networks.exe`std_detect::detect::arch::x86::__is_feature_detected::avx2 (4 samples, 0.01%)</title><rect x="26.2052%" y="229" width="0.0117%" height="15" fill="rgb(254,6,2)" fg:x="8964" fg:w="4"/><text x="26.4552%" y="239.50"></text></g><g><title>neural_networks.exe`std_detect::detect::check_for (4 samples, 0.01%)</title><rect x="26.2052%" y="213" width="0.0117%" height="15" fill="rgb(208,96,46)" fg:x="8964" fg:w="4"/><text x="26.4552%" y="223.50"></text></g><g><title>neural_networks.exe`std_detect::detect::cache::test (4 samples, 0.01%)</title><rect x="26.2052%" y="197" width="0.0117%" height="15" fill="rgb(239,3,39)" fg:x="8964" fg:w="4"/><text x="26.4552%" y="207.50"></text></g><g><title>neural_networks.exe`std_detect::detect::cache::Cache::test (4 samples, 0.01%)</title><rect x="26.2052%" y="181" width="0.0117%" height="15" fill="rgb(233,210,1)" fg:x="8964" fg:w="4"/><text x="26.4552%" y="191.50"></text></g><g><title>neural_networks.exe`core::intrinsics::unlikely (15 samples, 0.04%)</title><rect x="26.2169%" y="405" width="0.0439%" height="15" fill="rgb(244,137,37)" fg:x="8968" fg:w="15"/><text x="26.4669%" y="415.50"></text></g><g><title>neural_networks.exe`alloc::vec::impl$9::deref_mut(alloc::vec::Vec&lt;alloc::vec::Vec (3,130 samples, 9.15%)</title><rect x="17.3356%" y="549" width="9.1502%" height="15" fill="rgb(240,136,2)" fg:x="5930" fg:w="3130"/><text x="17.5856%" y="559.50">neural_networ..</text></g><g><title>neural_networks.exe`alloc::vec::Vec&lt;alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;,alloc::alloc::Global&gt;::as_mut_slice (3,130 samples, 9.15%)</title><rect x="17.3356%" y="533" width="9.1502%" height="15" fill="rgb(239,18,37)" fg:x="5930" fg:w="3130"/><text x="17.5856%" y="543.50">neural_networ..</text></g><g><title>neural_networks.exe`rand::seq::slice::impl$2::partial_shuffle&lt;alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;,rand::rngs::std::StdRng&gt;(ref_mut$&lt;slice2$&lt;alloc::vec::Vec (3,130 samples, 9.15%)</title><rect x="17.3356%" y="517" width="9.1502%" height="15" fill="rgb(218,185,22)" fg:x="5930" fg:w="3130"/><text x="17.5856%" y="527.50">neural_networ..</text></g><g><title>neural_networks.exe`rand::seq::increasing_uniform::IncreasingUniform&lt;ref_mut$&lt;rand::rngs::std::StdRng&gt; &gt;::next_index (1,665 samples, 4.87%)</title><rect x="21.6184%" y="501" width="4.8674%" height="15" fill="rgb(225,218,4)" fg:x="7395" fg:w="1665"/><text x="21.8684%" y="511.50">neural..</text></g><g><title>neural_networks.exe`core::num::impl$6::checked_sub (1,341 samples, 3.92%)</title><rect x="22.5656%" y="485" width="3.9203%" height="15" fill="rgb(230,182,32)" fg:x="7719" fg:w="1341"/><text x="22.8156%" y="495.50">neur..</text></g><g><title>neural_networks.exe`rand::seq::increasing_uniform::impl$0::next_index::closure$0(rand::seq::increasing_uniform::impl$0::next_index::closure_env$0&lt;ref_mut$ (1,184 samples, 3.46%)</title><rect x="23.0245%" y="469" width="3.4613%" height="15" fill="rgb(242,56,43)" fg:x="7876" fg:w="1184"/><text x="23.2745%" y="479.50">neu..</text></g><g><title>neural_networks.exe`rand::seq::increasing_uniform::calculate_bound_u32 (92 samples, 0.27%)</title><rect x="26.2169%" y="453" width="0.2690%" height="15" fill="rgb(233,99,24)" fg:x="8968" fg:w="92"/><text x="26.4669%" y="463.50"></text></g><g><title>neural_networks.exe`rand::seq::increasing_uniform::calculate_bound_u32::inner (92 samples, 0.27%)</title><rect x="26.2169%" y="437" width="0.2690%" height="15" fill="rgb(234,209,42)" fg:x="8968" fg:w="92"/><text x="26.4669%" y="447.50"></text></g><g><title>neural_networks.exe`core::num::impl$8::checked_mul (92 samples, 0.27%)</title><rect x="26.2169%" y="421" width="0.2690%" height="15" fill="rgb(227,7,12)" fg:x="8968" fg:w="92"/><text x="26.4669%" y="431.50"></text></g><g><title>neural_networks.exe`core::num::impl$8::overflowing_mul (77 samples, 0.23%)</title><rect x="26.2607%" y="405" width="0.2251%" height="15" fill="rgb(245,203,43)" fg:x="8983" fg:w="77"/><text x="26.5107%" y="415.50"></text></g><g><title>neural_networks.exe`core::iter::range::impl$6::next(core::ops::range::Range (11 samples, 0.03%)</title><rect x="26.4858%" y="549" width="0.0322%" height="15" fill="rgb(238,205,33)" fg:x="9060" fg:w="11"/><text x="26.7358%" y="559.50"></text></g><g><title>neural_networks.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (11 samples, 0.03%)</title><rect x="26.4858%" y="533" width="0.0322%" height="15" fill="rgb(231,56,7)" fg:x="9060" fg:w="11"/><text x="26.7358%" y="543.50"></text></g><g><title>neural_networks.exe`core::cmp::impls::impl$58::lt (6 samples, 0.02%)</title><rect x="26.5004%" y="517" width="0.0175%" height="15" fill="rgb(244,186,29)" fg:x="9065" fg:w="6"/><text x="26.7504%" y="527.50"></text></g><g><title>`0x7FFFB9AD0B6B (17 samples, 0.05%)</title><rect x="26.5238%" y="325" width="0.0497%" height="15" fill="rgb(234,111,31)" fg:x="9073" fg:w="17"/><text x="26.7738%" y="335.50"></text></g><g><title>`0x7FFFB9AD0BB9 (11 samples, 0.03%)</title><rect x="26.5794%" y="325" width="0.0322%" height="15" fill="rgb(241,149,10)" fg:x="9092" fg:w="11"/><text x="26.8294%" y="335.50"></text></g><g><title>`0x7FFFB9AD0BC3 (35 samples, 0.10%)</title><rect x="26.6144%" y="325" width="0.1023%" height="15" fill="rgb(249,206,44)" fg:x="9104" fg:w="35"/><text x="26.8644%" y="335.50"></text></g><g><title>`0x7FFFB9AD0BC7 (37 samples, 0.11%)</title><rect x="26.7168%" y="325" width="0.1082%" height="15" fill="rgb(251,153,30)" fg:x="9139" fg:w="37"/><text x="26.9668%" y="335.50"></text></g><g><title>`0x7FFFB9AD0BCC (21 samples, 0.06%)</title><rect x="26.8249%" y="325" width="0.0614%" height="15" fill="rgb(239,152,38)" fg:x="9176" fg:w="21"/><text x="27.0749%" y="335.50"></text></g><g><title>`0x7FFFB9AD0BD1 (33 samples, 0.10%)</title><rect x="26.8863%" y="325" width="0.0965%" height="15" fill="rgb(249,139,47)" fg:x="9197" fg:w="33"/><text x="27.1363%" y="335.50"></text></g><g><title>`0x7FFFB9AD0BE6 (12 samples, 0.04%)</title><rect x="26.9886%" y="325" width="0.0351%" height="15" fill="rgb(244,64,35)" fg:x="9232" fg:w="12"/><text x="27.2386%" y="335.50"></text></g><g><title>`0x7FFFB9AD0BF6 (41 samples, 0.12%)</title><rect x="27.0266%" y="325" width="0.1199%" height="15" fill="rgb(216,46,15)" fg:x="9245" fg:w="41"/><text x="27.2766%" y="335.50"></text></g><g><title>`0x7FFFB9AD0BFE (25 samples, 0.07%)</title><rect x="27.1465%" y="325" width="0.0731%" height="15" fill="rgb(250,74,19)" fg:x="9286" fg:w="25"/><text x="27.3965%" y="335.50"></text></g><g><title>`0x7FFFB9AD0C06 (29 samples, 0.08%)</title><rect x="27.2196%" y="325" width="0.0848%" height="15" fill="rgb(249,42,33)" fg:x="9311" fg:w="29"/><text x="27.4696%" y="335.50"></text></g><g><title>`0x7FFFB9AD0C0E (16 samples, 0.05%)</title><rect x="27.3044%" y="325" width="0.0468%" height="15" fill="rgb(242,149,17)" fg:x="9340" fg:w="16"/><text x="27.5544%" y="335.50"></text></g><g><title>neural_networks.exe`core::iter::traits::iterator::Iterator::for_each::call::closure$0(core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::ChunksExact&lt;f64&gt;,neural_networks::main::train::closure_env$1&gt; &gt; &gt;*, tuple$&lt;&gt;, alloc::vec::Vec (292 samples, 0.85%)</title><rect x="26.5180%" y="373" width="0.8536%" height="15" fill="rgb(244,29,21)" fg:x="9071" fg:w="292"/><text x="26.7680%" y="383.50"></text></g><g><title>neural_networks.exe`alloc::vec::impl$20::extend_trusted::closure$0(alloc::vec::impl$20::extend_trusted::closure_env$0&lt;alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::ChunksExact&lt;f64&gt;,neural_networks::main::train::closure_env$1&gt; &gt;*, alloc::vec::Vec (292 samples, 0.85%)</title><rect x="26.5180%" y="357" width="0.8536%" height="15" fill="rgb(220,130,37)" fg:x="9071" fg:w="292"/><text x="26.7680%" y="367.50"></text></g><g><title>neural_networks.exe`core::ptr::write(alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;*, alloc::vec::Vec (292 samples, 0.85%)</title><rect x="26.5180%" y="341" width="0.8536%" height="15" fill="rgb(211,67,2)" fg:x="9071" fg:w="292"/><text x="26.7680%" y="351.50"></text></g><g><title>`0x7FFFCCA37320 (4 samples, 0.01%)</title><rect x="27.4564%" y="213" width="0.0117%" height="15" fill="rgb(235,68,52)" fg:x="9392" fg:w="4"/><text x="27.7064%" y="223.50"></text></g><g><title>`0x7FFFCCA378A9 (13 samples, 0.04%)</title><rect x="27.4768%" y="213" width="0.0380%" height="15" fill="rgb(246,142,3)" fg:x="9399" fg:w="13"/><text x="27.7268%" y="223.50"></text></g><g><title>`0x7FFFCCAB0462 (359 samples, 1.05%)</title><rect x="27.5207%" y="197" width="1.0495%" height="15" fill="rgb(241,25,7)" fg:x="9414" fg:w="359"/><text x="27.7707%" y="207.50"></text></g><g><title>`0x7FFFCCAB0465 (15 samples, 0.04%)</title><rect x="28.5702%" y="197" width="0.0439%" height="15" fill="rgb(242,119,39)" fg:x="9773" fg:w="15"/><text x="28.8202%" y="207.50"></text></g><g><title>`0x7FFFCCA37B9F (375 samples, 1.10%)</title><rect x="27.5207%" y="213" width="1.0963%" height="15" fill="rgb(241,98,45)" fg:x="9414" fg:w="375"/><text x="27.7707%" y="223.50"></text></g><g><title>`0x7FFFCCA642F0 (5 samples, 0.01%)</title><rect x="28.6199%" y="165" width="0.0146%" height="15" fill="rgb(254,28,30)" fg:x="9790" fg:w="5"/><text x="28.8699%" y="175.50"></text></g><g><title>`0x7FFFCCA66DF3 (5 samples, 0.01%)</title><rect x="28.6374%" y="133" width="0.0146%" height="15" fill="rgb(241,142,54)" fg:x="9796" fg:w="5"/><text x="28.8874%" y="143.50"></text></g><g><title>`0x7FFFCCB82274 (5 samples, 0.01%)</title><rect x="28.6374%" y="117" width="0.0146%" height="15" fill="rgb(222,85,15)" fg:x="9796" fg:w="5"/><text x="28.8874%" y="127.50"></text></g><g><title>`0x7FFFCCA6655F (16 samples, 0.05%)</title><rect x="28.6374%" y="149" width="0.0468%" height="15" fill="rgb(210,85,47)" fg:x="9796" fg:w="16"/><text x="28.8874%" y="159.50"></text></g><g><title>`0x7FFFCCA66ED4 (10 samples, 0.03%)</title><rect x="28.6550%" y="133" width="0.0292%" height="15" fill="rgb(224,206,25)" fg:x="9802" fg:w="10"/><text x="28.9050%" y="143.50"></text></g><g><title>`0x7FFFCCA66A0A (10 samples, 0.03%)</title><rect x="28.6550%" y="117" width="0.0292%" height="15" fill="rgb(243,201,19)" fg:x="9802" fg:w="10"/><text x="28.9050%" y="127.50"></text></g><g><title>`0x7FFFCCA37E79 (25 samples, 0.07%)</title><rect x="28.6199%" y="213" width="0.0731%" height="15" fill="rgb(236,59,4)" fg:x="9790" fg:w="25"/><text x="28.8699%" y="223.50"></text></g><g><title>`0x7FFFCCA368C4 (25 samples, 0.07%)</title><rect x="28.6199%" y="197" width="0.0731%" height="15" fill="rgb(254,179,45)" fg:x="9790" fg:w="25"/><text x="28.8699%" y="207.50"></text></g><g><title>`0x7FFFCCA36CF1 (25 samples, 0.07%)</title><rect x="28.6199%" y="181" width="0.0731%" height="15" fill="rgb(226,14,10)" fg:x="9790" fg:w="25"/><text x="28.8699%" y="191.50"></text></g><g><title>`0x7FFFCCA65182 (19 samples, 0.06%)</title><rect x="28.6374%" y="165" width="0.0555%" height="15" fill="rgb(244,27,41)" fg:x="9796" fg:w="19"/><text x="28.8874%" y="175.50"></text></g><g><title>`0x7FFFCCA36A04 (449 samples, 1.31%)</title><rect x="27.3950%" y="229" width="1.3126%" height="15" fill="rgb(235,35,32)" fg:x="9371" fg:w="449"/><text x="27.6450%" y="239.50"></text></g><g><title>`0x7FFFCCA380CC (4 samples, 0.01%)</title><rect x="28.6959%" y="213" width="0.0117%" height="15" fill="rgb(218,68,31)" fg:x="9816" fg:w="4"/><text x="28.9459%" y="223.50"></text></g><g><title>`0x7FFFCCB82974 (4 samples, 0.01%)</title><rect x="28.6959%" y="197" width="0.0117%" height="15" fill="rgb(207,120,37)" fg:x="9816" fg:w="4"/><text x="28.9459%" y="207.50"></text></g><g><title>`0x7FFFCCA368C4 (456 samples, 1.33%)</title><rect x="27.3774%" y="245" width="1.3331%" height="15" fill="rgb(227,98,0)" fg:x="9365" fg:w="456"/><text x="27.6274%" y="255.50"></text></g><g><title>neural_networks.exe`std::path::PathBuf::new (757 samples, 2.21%)</title><rect x="26.5180%" y="517" width="2.2130%" height="15" fill="rgb(207,7,3)" fg:x="9071" fg:w="757"/><text x="26.7680%" y="527.50">n..</text></g><g><title>neural_networks.exe`alloc::vec::spec_from_iter::impl$0::from_iter&lt;alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::ChunksExact&lt;f64&gt;,neural_networks::main::train::closure_env$1&gt; &gt;(core::iter::adapters::map::Map&lt;core::slice::iter::ChunksExact (757 samples, 2.21%)</title><rect x="26.5180%" y="501" width="2.2130%" height="15" fill="rgb(206,98,19)" fg:x="9071" fg:w="757"/><text x="26.7680%" y="511.50">n..</text></g><g><title>neural_networks.exe`alloc::vec::spec_from_iter_nested::impl$1::from_iter(core::iter::adapters::map::Map&lt;core::slice::iter::ChunksExact (757 samples, 2.21%)</title><rect x="26.5180%" y="485" width="2.2130%" height="15" fill="rgb(217,5,26)" fg:x="9071" fg:w="757"/><text x="26.7680%" y="495.50">n..</text></g><g><title>neural_networks.exe`alloc::vec::spec_extend::impl$1::spec_extend(alloc::vec::Vec&lt;alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;,alloc::alloc::Global&gt;*, core::iter::adapters::map::Map&lt;core::slice::iter::ChunksExact (757 samples, 2.21%)</title><rect x="26.5180%" y="469" width="2.2130%" height="15" fill="rgb(235,190,38)" fg:x="9071" fg:w="757"/><text x="26.7680%" y="479.50">n..</text></g><g><title>neural_networks.exe`alloc::vec::Vec&lt;alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;,alloc::alloc::Global&gt;::extend_trusted(core::iter::adapters::map::Map&lt;core::slice::iter::ChunksExact (757 samples, 2.21%)</title><rect x="26.5180%" y="453" width="2.2130%" height="15" fill="rgb(247,86,24)" fg:x="9071" fg:w="757"/><text x="26.7680%" y="463.50">n..</text></g><g><title>neural_networks.exe`core::iter::traits::iterator::Iterator::for_each(core::iter::adapters::map::Map&lt;core::slice::iter::ChunksExact&lt;f64&gt;,neural_networks::main::train::closure_env$1&gt;, alloc::vec::impl$20::extend_trusted::closure_env$0&lt;alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::ChunksExact (757 samples, 2.21%)</title><rect x="26.5180%" y="437" width="2.2130%" height="15" fill="rgb(205,101,16)" fg:x="9071" fg:w="757"/><text x="26.7680%" y="447.50">n..</text></g><g><title>neural_networks.exe`core::iter::adapters::map::impl$2::fold(core::iter::adapters::map::Map&lt;core::slice::iter::ChunksExact&lt;f64&gt;,neural_networks::main::train::closure_env$1&gt;, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::ChunksExact (757 samples, 2.21%)</title><rect x="26.5180%" y="421" width="2.2130%" height="15" fill="rgb(246,168,33)" fg:x="9071" fg:w="757"/><text x="26.7680%" y="431.50">n..</text></g><g><title>neural_networks.exe`core::iter::traits::iterator::Iterator::fold(core::slice::iter::ChunksExact&lt;f64&gt;, tuple$&lt;&gt;, core::iter::adapters::map::map_fold::closure_env$0&lt;ref$&lt;slice2$&lt;f64&gt; &gt;,alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;,tuple$&lt;&gt;,neural_networks::main::train::closure_env$1,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::ChunksExact (757 samples, 2.21%)</title><rect x="26.5180%" y="405" width="2.2130%" height="15" fill="rgb(231,114,1)" fg:x="9071" fg:w="757"/><text x="26.7680%" y="415.50">n..</text></g><g><title>neural_networks.exe`core::iter::adapters::map::map_fold::closure$0(core::iter::adapters::map::map_fold::closure_env$0&lt;ref$&lt;slice2$&lt;f64&gt; &gt;,alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;,tuple$&lt;&gt;,neural_networks::main::train::closure_env$1,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::ChunksExact&lt;f64&gt;,neural_networks::main::train::closure_env$1&gt; &gt; &gt; &gt;*, tuple$&lt;&gt;, ref$&lt;slice2$ (757 samples, 2.21%)</title><rect x="26.5180%" y="389" width="2.2130%" height="15" fill="rgb(207,184,53)" fg:x="9071" fg:w="757"/><text x="26.7680%" y="399.50">n..</text></g><g><title>neural_networks.exe`neural_networks::main::train::closure$1(neural_networks::main::train::closure_env$1*, ref$&lt;slice2$ (465 samples, 1.36%)</title><rect x="27.3716%" y="373" width="1.3594%" height="15" fill="rgb(224,95,51)" fg:x="9363" fg:w="465"/><text x="27.6216%" y="383.50"></text></g><g><title>neural_networks.exe`alloc::slice::impl$0::to_vec(ref$&lt;slice2$ (465 samples, 1.36%)</title><rect x="27.3716%" y="357" width="1.3594%" height="15" fill="rgb(212,188,45)" fg:x="9363" fg:w="465"/><text x="27.6216%" y="367.50"></text></g><g><title>neural_networks.exe`alloc::slice::impl$0::to_vec_in(ref$&lt;slice2$ (465 samples, 1.36%)</title><rect x="27.3716%" y="341" width="1.3594%" height="15" fill="rgb(223,154,38)" fg:x="9363" fg:w="465"/><text x="27.6216%" y="351.50"></text></g><g><title>neural_networks.exe`alloc::slice::impl$0::to_vec_in::impl$1::to_vec(ref$&lt;slice2$ (465 samples, 1.36%)</title><rect x="27.3716%" y="325" width="1.3594%" height="15" fill="rgb(251,22,52)" fg:x="9363" fg:w="465"/><text x="27.6216%" y="335.50"></text></g><g><title>neural_networks.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (465 samples, 1.36%)</title><rect x="27.3716%" y="309" width="1.3594%" height="15" fill="rgb(229,209,22)" fg:x="9363" fg:w="465"/><text x="27.6216%" y="319.50"></text></g><g><title>neural_networks.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (465 samples, 1.36%)</title><rect x="27.3716%" y="293" width="1.3594%" height="15" fill="rgb(234,138,34)" fg:x="9363" fg:w="465"/><text x="27.6216%" y="303.50"></text></g><g><title>neural_networks.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (465 samples, 1.36%)</title><rect x="27.3716%" y="277" width="1.3594%" height="15" fill="rgb(212,95,11)" fg:x="9363" fg:w="465"/><text x="27.6216%" y="287.50"></text></g><g><title>neural_networks.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (465 samples, 1.36%)</title><rect x="27.3716%" y="261" width="1.3594%" height="15" fill="rgb(240,179,47)" fg:x="9363" fg:w="465"/><text x="27.6216%" y="271.50"></text></g><g><title>neural_networks.exe`std::sys::alloc::windows::process_heap_alloc (5 samples, 0.01%)</title><rect x="28.7163%" y="245" width="0.0146%" height="15" fill="rgb(240,163,11)" fg:x="9823" fg:w="5"/><text x="28.9663%" y="255.50"></text></g><g><title>neural_networks.exe`core::iter::traits::iterator::Iterator::collect(core::slice::iter::Iter&lt;ref$ (758 samples, 2.22%)</title><rect x="26.5180%" y="549" width="2.2159%" height="15" fill="rgb(236,37,12)" fg:x="9071" fg:w="758"/><text x="26.7680%" y="559.50">n..</text></g><g><title>neural_networks.exe`std::path::impl$42::from_iter(core::slice::iter::Iter&lt;ref$ (758 samples, 2.22%)</title><rect x="26.5180%" y="533" width="2.2159%" height="15" fill="rgb(232,164,16)" fg:x="9071" fg:w="758"/><text x="26.7680%" y="543.50">n..</text></g><g><title>`0x7FFFCCAA0243 (35 samples, 0.10%)</title><rect x="28.7660%" y="405" width="0.1023%" height="15" fill="rgb(244,205,15)" fg:x="9840" fg:w="35"/><text x="29.0160%" y="415.50"></text></g><g><title>`0x7FFFCCAA0359 (7 samples, 0.02%)</title><rect x="28.8684%" y="405" width="0.0205%" height="15" fill="rgb(223,117,47)" fg:x="9875" fg:w="7"/><text x="29.1184%" y="415.50"></text></g><g><title>`0x7FFFCCAC1D98 (43 samples, 0.13%)</title><rect x="28.8976%" y="341" width="0.1257%" height="15" fill="rgb(244,107,35)" fg:x="9885" fg:w="43"/><text x="29.1476%" y="351.50"></text></g><g><title>`0x7FFFCCA3F77E (41 samples, 0.12%)</title><rect x="28.9034%" y="325" width="0.1199%" height="15" fill="rgb(205,140,8)" fg:x="9887" fg:w="41"/><text x="29.1534%" y="335.50"></text></g><g><title>`0x7FFFCCB0AD59 (41 samples, 0.12%)</title><rect x="28.9034%" y="309" width="0.1199%" height="15" fill="rgb(228,84,46)" fg:x="9887" fg:w="41"/><text x="29.1534%" y="319.50"></text></g><g><title>`0x7FFFCCB82334 (41 samples, 0.12%)</title><rect x="28.9034%" y="293" width="0.1199%" height="15" fill="rgb(254,188,9)" fg:x="9887" fg:w="41"/><text x="29.1534%" y="303.50"></text></g><g><title>`0x7FFFCCAC1F4E (6 samples, 0.02%)</title><rect x="29.0233%" y="341" width="0.0175%" height="15" fill="rgb(206,112,54)" fg:x="9928" fg:w="6"/><text x="29.2733%" y="351.50"></text></g><g><title>`0x7FFFCCA92D2F (6 samples, 0.02%)</title><rect x="29.0233%" y="325" width="0.0175%" height="15" fill="rgb(216,84,49)" fg:x="9928" fg:w="6"/><text x="29.2733%" y="335.50"></text></g><g><title>`0x7FFFCCB82334 (6 samples, 0.02%)</title><rect x="29.0233%" y="309" width="0.0175%" height="15" fill="rgb(214,194,35)" fg:x="9928" fg:w="6"/><text x="29.2733%" y="319.50"></text></g><g><title>`0x7FFFCCAC21A6 (10 samples, 0.03%)</title><rect x="29.0467%" y="341" width="0.0292%" height="15" fill="rgb(249,28,3)" fg:x="9936" fg:w="10"/><text x="29.2967%" y="351.50"></text></g><g><title>`0x7FFFCCA92D2F (10 samples, 0.03%)</title><rect x="29.0467%" y="325" width="0.0292%" height="15" fill="rgb(222,56,52)" fg:x="9936" fg:w="10"/><text x="29.2967%" y="335.50"></text></g><g><title>`0x7FFFCCB82334 (10 samples, 0.03%)</title><rect x="29.0467%" y="309" width="0.0292%" height="15" fill="rgb(245,217,50)" fg:x="9936" fg:w="10"/><text x="29.2967%" y="319.50"></text></g><g><title>`0x7FFFCCA3C136 (66 samples, 0.19%)</title><rect x="28.8917%" y="357" width="0.1929%" height="15" fill="rgb(213,201,24)" fg:x="9883" fg:w="66"/><text x="29.1417%" y="367.50"></text></g><g><title>`0x7FFFCCA3A0D4 (67 samples, 0.20%)</title><rect x="28.8917%" y="389" width="0.1959%" height="15" fill="rgb(248,116,28)" fg:x="9883" fg:w="67"/><text x="29.1417%" y="399.50"></text></g><g><title>`0x7FFFCCAA06E0 (67 samples, 0.20%)</title><rect x="28.8917%" y="373" width="0.1959%" height="15" fill="rgb(219,72,43)" fg:x="9883" fg:w="67"/><text x="29.1417%" y="383.50"></text></g><g><title>`0x7FFFCCAC1ABF (4 samples, 0.01%)</title><rect x="29.0935%" y="325" width="0.0117%" height="15" fill="rgb(209,138,14)" fg:x="9952" fg:w="4"/><text x="29.3435%" y="335.50"></text></g><g><title>`0x7FFFCCA401CA (4 samples, 0.01%)</title><rect x="29.0935%" y="309" width="0.0117%" height="15" fill="rgb(222,18,33)" fg:x="9952" fg:w="4"/><text x="29.3435%" y="319.50"></text></g><g><title>`0x7FFFCCAC1D98 (71 samples, 0.21%)</title><rect x="29.1052%" y="325" width="0.2076%" height="15" fill="rgb(213,199,7)" fg:x="9956" fg:w="71"/><text x="29.3552%" y="335.50"></text></g><g><title>`0x7FFFCCA3F77E (71 samples, 0.21%)</title><rect x="29.1052%" y="309" width="0.2076%" height="15" fill="rgb(250,110,10)" fg:x="9956" fg:w="71"/><text x="29.3552%" y="319.50"></text></g><g><title>`0x7FFFCCB0AD59 (71 samples, 0.21%)</title><rect x="29.1052%" y="293" width="0.2076%" height="15" fill="rgb(248,123,6)" fg:x="9956" fg:w="71"/><text x="29.3552%" y="303.50"></text></g><g><title>`0x7FFFCCB82334 (71 samples, 0.21%)</title><rect x="29.1052%" y="277" width="0.2076%" height="15" fill="rgb(206,91,31)" fg:x="9956" fg:w="71"/><text x="29.3552%" y="287.50"></text></g><g><title>`0x7FFFCCAC21A6 (14 samples, 0.04%)</title><rect x="29.3186%" y="325" width="0.0409%" height="15" fill="rgb(211,154,13)" fg:x="10029" fg:w="14"/><text x="29.5686%" y="335.50"></text></g><g><title>`0x7FFFCCA92D2F (14 samples, 0.04%)</title><rect x="29.3186%" y="309" width="0.0409%" height="15" fill="rgb(225,148,7)" fg:x="10029" fg:w="14"/><text x="29.5686%" y="319.50"></text></g><g><title>`0x7FFFCCB82334 (14 samples, 0.04%)</title><rect x="29.3186%" y="293" width="0.0409%" height="15" fill="rgb(220,160,43)" fg:x="10029" fg:w="14"/><text x="29.5686%" y="303.50"></text></g><g><title>`0x7FFFCCA3C136 (92 samples, 0.27%)</title><rect x="29.0935%" y="341" width="0.2690%" height="15" fill="rgb(213,52,39)" fg:x="9952" fg:w="92"/><text x="29.3435%" y="351.50"></text></g><g><title>neural_networks.exe`core::ptr::drop_in_place(ptr_mut$&lt;slice2$&lt;alloc::vec::Vec (219 samples, 0.64%)</title><rect x="28.7339%" y="517" width="0.6402%" height="15" fill="rgb(243,137,7)" fg:x="9829" fg:w="219"/><text x="28.9839%" y="527.50"></text></g><g><title>neural_networks.exe`core::ptr::drop_in_place(alloc::vec::Vec (219 samples, 0.64%)</title><rect x="28.7339%" y="501" width="0.6402%" height="15" fill="rgb(230,79,13)" fg:x="9829" fg:w="219"/><text x="28.9839%" y="511.50"></text></g><g><title>neural_networks.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (219 samples, 0.64%)</title><rect x="28.7339%" y="485" width="0.6402%" height="15" fill="rgb(247,105,23)" fg:x="9829" fg:w="219"/><text x="28.9839%" y="495.50"></text></g><g><title>neural_networks.exe`alloc::raw_vec::impl$3::drop(alloc::raw_vec::RawVec (219 samples, 0.64%)</title><rect x="28.7339%" y="469" width="0.6402%" height="15" fill="rgb(223,179,41)" fg:x="9829" fg:w="219"/><text x="28.9839%" y="479.50"></text></g><g><title>neural_networks.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (219 samples, 0.64%)</title><rect x="28.7339%" y="453" width="0.6402%" height="15" fill="rgb(218,9,34)" fg:x="9829" fg:w="219"/><text x="28.9839%" y="463.50"></text></g><g><title>neural_networks.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (219 samples, 0.64%)</title><rect x="28.7339%" y="437" width="0.6402%" height="15" fill="rgb(222,106,8)" fg:x="9829" fg:w="219"/><text x="28.9839%" y="447.50"></text></g><g><title>neural_networks.exe`alloc::alloc::dealloc (219 samples, 0.64%)</title><rect x="28.7339%" y="421" width="0.6402%" height="15" fill="rgb(211,220,0)" fg:x="9829" fg:w="219"/><text x="28.9839%" y="431.50"></text></g><g><title>`0x7FFFCCAA0648 (166 samples, 0.49%)</title><rect x="28.8888%" y="405" width="0.4853%" height="15" fill="rgb(229,52,16)" fg:x="9882" fg:w="166"/><text x="29.1388%" y="415.50"></text></g><g><title>`0x7FFFCCA3A14B (98 samples, 0.29%)</title><rect x="29.0876%" y="389" width="0.2865%" height="15" fill="rgb(212,155,18)" fg:x="9950" fg:w="98"/><text x="29.3376%" y="399.50"></text></g><g><title>`0x7FFFCCADF082 (97 samples, 0.28%)</title><rect x="29.0905%" y="373" width="0.2836%" height="15" fill="rgb(242,21,14)" fg:x="9951" fg:w="97"/><text x="29.3405%" y="383.50"></text></g><g><title>`0x7FFFCCAA06E0 (97 samples, 0.28%)</title><rect x="29.0905%" y="357" width="0.2836%" height="15" fill="rgb(222,19,48)" fg:x="9951" fg:w="97"/><text x="29.3405%" y="367.50"></text></g><g><title>neural_networks.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;alloc::vec::Vec (220 samples, 0.64%)</title><rect x="28.7339%" y="549" width="0.6431%" height="15" fill="rgb(232,45,27)" fg:x="9829" fg:w="220"/><text x="28.9839%" y="559.50"></text></g><g><title>neural_networks.exe`alloc::vec::impl$25::drop(alloc::vec::Vec&lt;alloc::vec::Vec (220 samples, 0.64%)</title><rect x="28.7339%" y="533" width="0.6431%" height="15" fill="rgb(249,103,42)" fg:x="9829" fg:w="220"/><text x="28.9839%" y="543.50"></text></g><g><title>neural_networks.exe`enum2$&lt;core::result::Result&lt;usize,std::io::error::Error&gt; &gt;::expect(enum2$&lt;core::result::Result&lt;usize,std::io::error::Error&gt; &gt;, ref$ (24 samples, 0.07%)</title><rect x="29.3770%" y="549" width="0.0702%" height="15" fill="rgb(246,81,33)" fg:x="10049" fg:w="24"/><text x="29.6270%" y="559.50"></text></g><g><title>neural_networks.exe`std::fs::impl$8::read_to_end (24 samples, 0.07%)</title><rect x="29.3770%" y="533" width="0.0702%" height="15" fill="rgb(252,33,42)" fg:x="10049" fg:w="24"/><text x="29.6270%" y="543.50"></text></g><g><title>neural_networks.exe`std::io::default_read_to_end&lt;ref$&lt;std::fs::File&gt; &gt; (24 samples, 0.07%)</title><rect x="29.3770%" y="517" width="0.0702%" height="15" fill="rgb(209,212,41)" fg:x="10049" fg:w="24"/><text x="29.6270%" y="527.50"></text></g><g><title>neural_networks.exe`std::fs::impl$5::read_buf (24 samples, 0.07%)</title><rect x="29.3770%" y="501" width="0.0702%" height="15" fill="rgb(207,154,6)" fg:x="10049" fg:w="24"/><text x="29.6270%" y="511.50"></text></g><g><title>neural_networks.exe`std::sys::fs::windows::File::read_buf (24 samples, 0.07%)</title><rect x="29.3770%" y="485" width="0.0702%" height="15" fill="rgb(223,64,47)" fg:x="10049" fg:w="24"/><text x="29.6270%" y="495.50"></text></g><g><title>neural_networks.exe`std::sys::pal::windows::handle::Handle::read_buf (24 samples, 0.07%)</title><rect x="29.3770%" y="469" width="0.0702%" height="15" fill="rgb(211,161,38)" fg:x="10049" fg:w="24"/><text x="29.6270%" y="479.50"></text></g><g><title>neural_networks.exe`std::sys::pal::windows::handle::Handle::synchronous_read (24 samples, 0.07%)</title><rect x="29.3770%" y="453" width="0.0702%" height="15" fill="rgb(219,138,40)" fg:x="10049" fg:w="24"/><text x="29.6270%" y="463.50"></text></g><g><title>`0x7FFFCCB82034 (24 samples, 0.07%)</title><rect x="29.3770%" y="437" width="0.0702%" height="15" fill="rgb(241,228,46)" fg:x="10049" fg:w="24"/><text x="29.6270%" y="447.50"></text></g><g><title>`0x7FFFB9AD064B (92 samples, 0.27%)</title><rect x="29.4530%" y="517" width="0.2690%" height="15" fill="rgb(223,209,38)" fg:x="10075" fg:w="92"/><text x="29.7030%" y="527.50"></text></g><g><title>neural_networks.exe`alloc::vec::impl$11::clone(alloc::vec::Vec (6 samples, 0.02%)</title><rect x="29.7337%" y="517" width="0.0175%" height="15" fill="rgb(236,164,45)" fg:x="10171" fg:w="6"/><text x="29.9837%" y="527.50"></text></g><g><title>neural_networks.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (5 samples, 0.01%)</title><rect x="29.7366%" y="501" width="0.0146%" height="15" fill="rgb(231,15,5)" fg:x="10172" fg:w="5"/><text x="29.9866%" y="511.50"></text></g><g><title>neural_networks.exe`alloc::slice::impl$0::to_vec_in::impl$1::to_vec(ref$&lt;slice2$ (5 samples, 0.01%)</title><rect x="29.7366%" y="485" width="0.0146%" height="15" fill="rgb(252,35,15)" fg:x="10172" fg:w="5"/><text x="29.9866%" y="495.50"></text></g><g><title>neural_networks.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (5 samples, 0.01%)</title><rect x="29.7366%" y="469" width="0.0146%" height="15" fill="rgb(248,181,18)" fg:x="10172" fg:w="5"/><text x="29.9866%" y="479.50"></text></g><g><title>neural_networks.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (5 samples, 0.01%)</title><rect x="29.7366%" y="453" width="0.0146%" height="15" fill="rgb(233,39,42)" fg:x="10172" fg:w="5"/><text x="29.9866%" y="463.50"></text></g><g><title>neural_networks.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (5 samples, 0.01%)</title><rect x="29.7366%" y="437" width="0.0146%" height="15" fill="rgb(238,110,33)" fg:x="10172" fg:w="5"/><text x="29.9866%" y="447.50"></text></g><g><title>neural_networks.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (5 samples, 0.01%)</title><rect x="29.7366%" y="421" width="0.0146%" height="15" fill="rgb(233,195,10)" fg:x="10172" fg:w="5"/><text x="29.9866%" y="431.50"></text></g><g><title>`0x7FFFCCA368C4 (5 samples, 0.01%)</title><rect x="29.7366%" y="405" width="0.0146%" height="15" fill="rgb(254,105,3)" fg:x="10172" fg:w="5"/><text x="29.9866%" y="415.50"></text></g><g><title>`0x7FFFCCA36CF1 (5 samples, 0.01%)</title><rect x="29.7366%" y="389" width="0.0146%" height="15" fill="rgb(221,225,9)" fg:x="10172" fg:w="5"/><text x="29.9866%" y="399.50"></text></g><g><title>neural_networks.exe`alloc::alloc::exchange_malloc (103 samples, 0.30%)</title><rect x="29.4530%" y="533" width="0.3011%" height="15" fill="rgb(224,227,45)" fg:x="10075" fg:w="103"/><text x="29.7030%" y="543.50"></text></g><g><title>`0x7FFFCCA36A04 (4 samples, 0.01%)</title><rect x="29.7571%" y="325" width="0.0117%" height="15" fill="rgb(229,198,43)" fg:x="10179" fg:w="4"/><text x="30.0071%" y="335.50"></text></g><g><title>neural_networks.exe`alloc::raw_vec::RawVec&lt;neural_networks::matrices::Matrix,alloc::alloc::Global&gt;::grow_one&lt;neural_networks::matrices::Matrix,alloc::alloc::Global&gt; (5 samples, 0.01%)</title><rect x="29.7571%" y="517" width="0.0146%" height="15" fill="rgb(206,209,35)" fg:x="10179" fg:w="5"/><text x="30.0071%" y="527.50"></text></g><g><title>neural_networks.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (5 samples, 0.01%)</title><rect x="29.7571%" y="501" width="0.0146%" height="15" fill="rgb(245,195,53)" fg:x="10179" fg:w="5"/><text x="30.0071%" y="511.50"></text></g><g><title>neural_networks.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (5 samples, 0.01%)</title><rect x="29.7571%" y="485" width="0.0146%" height="15" fill="rgb(240,92,26)" fg:x="10179" fg:w="5"/><text x="30.0071%" y="495.50"></text></g><g><title>neural_networks.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (5 samples, 0.01%)</title><rect x="29.7571%" y="469" width="0.0146%" height="15" fill="rgb(207,40,23)" fg:x="10179" fg:w="5"/><text x="30.0071%" y="479.50"></text></g><g><title>neural_networks.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (5 samples, 0.01%)</title><rect x="29.7571%" y="453" width="0.0146%" height="15" fill="rgb(223,111,35)" fg:x="10179" fg:w="5"/><text x="30.0071%" y="463.50"></text></g><g><title>neural_networks.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (5 samples, 0.01%)</title><rect x="29.7571%" y="437" width="0.0146%" height="15" fill="rgb(229,147,28)" fg:x="10179" fg:w="5"/><text x="30.0071%" y="447.50"></text></g><g><title>neural_networks.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (5 samples, 0.01%)</title><rect x="29.7571%" y="421" width="0.0146%" height="15" fill="rgb(211,29,28)" fg:x="10179" fg:w="5"/><text x="30.0071%" y="431.50"></text></g><g><title>neural_networks.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (5 samples, 0.01%)</title><rect x="29.7571%" y="405" width="0.0146%" height="15" fill="rgb(228,72,33)" fg:x="10179" fg:w="5"/><text x="30.0071%" y="415.50"></text></g><g><title>`0x7FFFCCA6776D (5 samples, 0.01%)</title><rect x="29.7571%" y="389" width="0.0146%" height="15" fill="rgb(205,214,31)" fg:x="10179" fg:w="5"/><text x="30.0071%" y="399.50"></text></g><g><title>`0x7FFFCCA67A15 (5 samples, 0.01%)</title><rect x="29.7571%" y="373" width="0.0146%" height="15" fill="rgb(224,111,15)" fg:x="10179" fg:w="5"/><text x="30.0071%" y="383.50"></text></g><g><title>`0x7FFFCCA682CA (5 samples, 0.01%)</title><rect x="29.7571%" y="357" width="0.0146%" height="15" fill="rgb(253,21,26)" fg:x="10179" fg:w="5"/><text x="30.0071%" y="367.50"></text></g><g><title>`0x7FFFCCA368C4 (5 samples, 0.01%)</title><rect x="29.7571%" y="341" width="0.0146%" height="15" fill="rgb(245,139,43)" fg:x="10179" fg:w="5"/><text x="30.0071%" y="351.50"></text></g><g><title>neural_networks.exe`alloc::vec::Vec&lt;neural_networks::matrices::Matrix,alloc::alloc::Global&gt;::push (7 samples, 0.02%)</title><rect x="29.7571%" y="533" width="0.0205%" height="15" fill="rgb(252,170,7)" fg:x="10179" fg:w="7"/><text x="30.0071%" y="543.50"></text></g><g><title>`0x7FFFCCAA06E0 (6 samples, 0.02%)</title><rect x="29.7805%" y="469" width="0.0175%" height="15" fill="rgb(231,118,14)" fg:x="10187" fg:w="6"/><text x="30.0305%" y="479.50"></text></g><g><title>neural_networks.exe`core::ptr::drop_in_place (8 samples, 0.02%)</title><rect x="29.7805%" y="533" width="0.0234%" height="15" fill="rgb(238,83,0)" fg:x="10187" fg:w="8"/><text x="30.0305%" y="543.50"></text></g><g><title>neural_networks.exe`core::ptr::drop_in_place(alloc::vec::Vec (8 samples, 0.02%)</title><rect x="29.7805%" y="517" width="0.0234%" height="15" fill="rgb(221,39,39)" fg:x="10187" fg:w="8"/><text x="30.0305%" y="527.50"></text></g><g><title>neural_networks.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (8 samples, 0.02%)</title><rect x="29.7805%" y="501" width="0.0234%" height="15" fill="rgb(222,119,46)" fg:x="10187" fg:w="8"/><text x="30.0305%" y="511.50"></text></g><g><title>neural_networks.exe`alloc::raw_vec::impl$3::drop(alloc::raw_vec::RawVec (8 samples, 0.02%)</title><rect x="29.7805%" y="485" width="0.0234%" height="15" fill="rgb(222,165,49)" fg:x="10187" fg:w="8"/><text x="30.0305%" y="495.50"></text></g><g><title>neural_networks.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::push (105 samples, 0.31%)</title><rect x="29.8038%" y="501" width="0.3070%" height="15" fill="rgb(219,113,52)" fg:x="10195" fg:w="105"/><text x="30.0538%" y="511.50"></text></g><g><title>neural_networks.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::as_mut_ptr (79 samples, 0.23%)</title><rect x="29.8798%" y="485" width="0.2309%" height="15" fill="rgb(214,7,15)" fg:x="10221" fg:w="79"/><text x="30.1298%" y="495.50"></text></g><g><title>neural_networks.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::ptr (79 samples, 0.23%)</title><rect x="29.8798%" y="469" width="0.2309%" height="15" fill="rgb(235,32,4)" fg:x="10221" fg:w="79"/><text x="30.1298%" y="479.50"></text></g><g><title>neural_networks.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (79 samples, 0.23%)</title><rect x="29.8798%" y="453" width="0.2309%" height="15" fill="rgb(238,90,54)" fg:x="10221" fg:w="79"/><text x="30.1298%" y="463.50"></text></g><g><title>neural_networks.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (79 samples, 0.23%)</title><rect x="29.8798%" y="437" width="0.2309%" height="15" fill="rgb(213,208,19)" fg:x="10221" fg:w="79"/><text x="30.1298%" y="447.50"></text></g><g><title>neural_networks.exe`core::cmp::impls::impl$58::lt (51 samples, 0.15%)</title><rect x="30.3973%" y="469" width="0.1491%" height="15" fill="rgb(233,156,4)" fg:x="10398" fg:w="51"/><text x="30.6473%" y="479.50"></text></g><g><title>neural_networks.exe`core::iter::range::impl$6::next(core::ops::range::Range (150 samples, 0.44%)</title><rect x="30.1166%" y="501" width="0.4385%" height="15" fill="rgb(207,194,5)" fg:x="10302" fg:w="150"/><text x="30.3666%" y="511.50"></text></g><g><title>neural_networks.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (150 samples, 0.44%)</title><rect x="30.1166%" y="485" width="0.4385%" height="15" fill="rgb(206,111,30)" fg:x="10302" fg:w="150"/><text x="30.3666%" y="495.50"></text></g><g><title>neural_networks.exe`core::iter::range::impl$6::next(core::ops::range::Range (1,514 samples, 4.43%)</title><rect x="30.5551%" y="485" width="4.4260%" height="15" fill="rgb(243,70,54)" fg:x="10452" fg:w="1514"/><text x="30.8051%" y="495.50">neura..</text></g><g><title>neural_networks.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (1,514 samples, 4.43%)</title><rect x="30.5551%" y="469" width="4.4260%" height="15" fill="rgb(242,28,8)" fg:x="10452" fg:w="1514"/><text x="30.8051%" y="479.50">neura..</text></g><g><title>neural_networks.exe`core::cmp::impls::impl$58::lt (6 samples, 0.02%)</title><rect x="34.9636%" y="453" width="0.0175%" height="15" fill="rgb(219,106,18)" fg:x="11960" fg:w="6"/><text x="35.2136%" y="463.50"></text></g><g><title>`0x7FFFCA0D3490 (4,590 samples, 13.42%)</title><rect x="38.2436%" y="453" width="13.4183%" height="15" fill="rgb(244,222,10)" fg:x="13082" fg:w="4590"/><text x="38.4936%" y="463.50">`0x7FFFCA0D3490</text></g><g><title>`0x7FFFCA0D3497 (468 samples, 1.37%)</title><rect x="51.6619%" y="453" width="1.3681%" height="15" fill="rgb(236,179,52)" fg:x="17672" fg:w="468"/><text x="51.9119%" y="463.50"></text></g><g><title>`0x7FFFCA0D3499 (73 samples, 0.21%)</title><rect x="53.0301%" y="453" width="0.2134%" height="15" fill="rgb(213,23,39)" fg:x="18140" fg:w="73"/><text x="53.2801%" y="463.50"></text></g><g><title>`0x7FFFCA0D349E (3,572 samples, 10.44%)</title><rect x="53.2435%" y="453" width="10.4423%" height="15" fill="rgb(238,48,10)" fg:x="18213" fg:w="3572"/><text x="53.4935%" y="463.50">`0x7FFFCA0D349E</text></g><g><title>neural_networks.exe`core::slice::index::impl$0::index(ref$&lt;slice2$ (221 samples, 0.65%)</title><rect x="63.6858%" y="453" width="0.6461%" height="15" fill="rgb(251,196,23)" fg:x="21785" fg:w="221"/><text x="63.9358%" y="463.50"></text></g><g><title>neural_networks.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$ (221 samples, 0.65%)</title><rect x="63.6858%" y="437" width="0.6461%" height="15" fill="rgb(250,152,24)" fg:x="21785" fg:w="221"/><text x="63.9358%" y="447.50"></text></g><g><title>neural_networks.exe`neural_networks::matrices::Matrix::t1mult (11,812 samples, 34.53%)</title><rect x="29.8038%" y="517" width="34.5309%" height="15" fill="rgb(209,150,17)" fg:x="10195" fg:w="11812"/><text x="30.0538%" y="527.50">neural_networks.exe`neural_networks::matrices::Matrix::t..</text></g><g><title>neural_networks.exe`core::iter::traits::iterator::Iterator::fold(core::ops::range::Range (11,555 samples, 33.78%)</title><rect x="30.5551%" y="501" width="33.7796%" height="15" fill="rgb(234,202,34)" fg:x="10452" fg:w="11555"/><text x="30.8051%" y="511.50">neural_networks.exe`core::iter::traits::iterator::Itera..</text></g><g><title>neural_networks.exe`neural_networks::matrices::impl$0::t1mult::closure$0 (10,041 samples, 29.35%)</title><rect x="34.9811%" y="485" width="29.3536%" height="15" fill="rgb(253,148,53)" fg:x="11966" fg:w="10041"/><text x="35.2311%" y="495.50">neural_networks.exe`neural_networks::matrices::..</text></g><g><title>neural_networks.exe`alloc::vec::impl$13::index(alloc::vec::Vec (8,975 samples, 26.24%)</title><rect x="38.0975%" y="469" width="26.2373%" height="15" fill="rgb(218,129,16)" fg:x="13032" fg:w="8975"/><text x="38.3475%" y="479.50">neural_networks.exe`alloc::vec::impl$13::i..</text></g><g><title>neural_networks.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::push (4 samples, 0.01%)</title><rect x="64.3377%" y="501" width="0.0117%" height="15" fill="rgb(216,85,19)" fg:x="22008" fg:w="4"/><text x="64.5877%" y="511.50"></text></g><g><title>neural_networks.exe`core::iter::range::impl$6::next(core::ops::range::Range (4 samples, 0.01%)</title><rect x="64.3494%" y="501" width="0.0117%" height="15" fill="rgb(235,228,7)" fg:x="22012" fg:w="4"/><text x="64.5994%" y="511.50"></text></g><g><title>neural_networks.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (4 samples, 0.01%)</title><rect x="64.3494%" y="485" width="0.0117%" height="15" fill="rgb(245,175,0)" fg:x="22012" fg:w="4"/><text x="64.5994%" y="495.50"></text></g><g><title>neural_networks.exe`core::iter::range::impl$6::next(core::ops::range::Range (10 samples, 0.03%)</title><rect x="64.3611%" y="485" width="0.0292%" height="15" fill="rgb(208,168,36)" fg:x="22016" fg:w="10"/><text x="64.6111%" y="495.50"></text></g><g><title>neural_networks.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (10 samples, 0.03%)</title><rect x="64.3611%" y="469" width="0.0292%" height="15" fill="rgb(246,171,24)" fg:x="22016" fg:w="10"/><text x="64.6111%" y="479.50"></text></g><g><title>`0x7FFFCA0D3499 (6 samples, 0.02%)</title><rect x="64.5160%" y="453" width="0.0175%" height="15" fill="rgb(215,142,24)" fg:x="22069" fg:w="6"/><text x="64.7660%" y="463.50"></text></g><g><title>`0x7FFFCA0D349E (103 samples, 0.30%)</title><rect x="64.5336%" y="453" width="0.3011%" height="15" fill="rgb(250,187,7)" fg:x="22075" fg:w="103"/><text x="64.7836%" y="463.50"></text></g><g><title>neural_networks.exe`enum2$&lt;core::result::Result&lt;neural_networks::matrices::Matrix,ref$&lt;str$&gt; &gt; &gt;::unwrap(enum2$&lt;core::result::Result&lt;neural_networks::matrices::Matrix,ref$ (11,985 samples, 35.04%)</title><rect x="29.8038%" y="533" width="35.0367%" height="15" fill="rgb(228,66,33)" fg:x="10195" fg:w="11985"/><text x="30.0538%" y="543.50">neural_networks.exe`enum2$&lt;core::result::Result&lt;neural_ne..</text></g><g><title>neural_networks.exe`neural_networks::matrices::Matrix::t2mult (173 samples, 0.51%)</title><rect x="64.3348%" y="517" width="0.5057%" height="15" fill="rgb(234,215,21)" fg:x="22007" fg:w="173"/><text x="64.5848%" y="527.50"></text></g><g><title>neural_networks.exe`core::iter::traits::iterator::Iterator::fold(core::ops::range::Range (164 samples, 0.48%)</title><rect x="64.3611%" y="501" width="0.4794%" height="15" fill="rgb(222,191,20)" fg:x="22016" fg:w="164"/><text x="64.6111%" y="511.50"></text></g><g><title>neural_networks.exe`neural_networks::matrices::impl$0::t2mult::closure$0 (154 samples, 0.45%)</title><rect x="64.3903%" y="485" width="0.4502%" height="15" fill="rgb(245,79,54)" fg:x="22026" fg:w="154"/><text x="64.6403%" y="495.50"></text></g><g><title>neural_networks.exe`alloc::vec::impl$13::index(alloc::vec::Vec (121 samples, 0.35%)</title><rect x="64.4868%" y="469" width="0.3537%" height="15" fill="rgb(240,10,37)" fg:x="22059" fg:w="121"/><text x="64.7368%" y="479.50"></text></g><g><title>neural_networks.exe`neural_networks::matrices::Matrix::cons_prod (29 samples, 0.08%)</title><rect x="64.8405%" y="533" width="0.0848%" height="15" fill="rgb(214,192,32)" fg:x="22180" fg:w="29"/><text x="65.0905%" y="543.50"></text></g><g><title>`0x7FFFCA09F8B4 (4 samples, 0.01%)</title><rect x="64.9399%" y="293" width="0.0117%" height="15" fill="rgb(209,36,54)" fg:x="22214" fg:w="4"/><text x="65.1899%" y="303.50"></text></g><g><title>`0x7FFFCA09FA12 (22 samples, 0.06%)</title><rect x="64.9750%" y="293" width="0.0643%" height="15" fill="rgb(220,10,11)" fg:x="22226" fg:w="22"/><text x="65.2250%" y="303.50"></text></g><g><title>`0x7FFFCA09FA7F (7 samples, 0.02%)</title><rect x="65.0539%" y="293" width="0.0205%" height="15" fill="rgb(221,106,17)" fg:x="22253" fg:w="7"/><text x="65.3039%" y="303.50"></text></g><g><title>`0x7FFFCA09FA8B (4 samples, 0.01%)</title><rect x="65.0744%" y="293" width="0.0117%" height="15" fill="rgb(251,142,44)" fg:x="22260" fg:w="4"/><text x="65.3244%" y="303.50"></text></g><g><title>`0x7FFFCA09FA93 (7 samples, 0.02%)</title><rect x="65.0861%" y="293" width="0.0205%" height="15" fill="rgb(238,13,15)" fg:x="22264" fg:w="7"/><text x="65.3361%" y="303.50"></text></g><g><title>`0x7FFFCA09FAA3 (6 samples, 0.02%)</title><rect x="65.1095%" y="293" width="0.0175%" height="15" fill="rgb(208,107,27)" fg:x="22272" fg:w="6"/><text x="65.3595%" y="303.50"></text></g><g><title>`0x7FFFCA09FAA7 (4 samples, 0.01%)</title><rect x="65.1270%" y="293" width="0.0117%" height="15" fill="rgb(205,136,37)" fg:x="22278" fg:w="4"/><text x="65.3770%" y="303.50"></text></g><g><title>`0x7FFFCA09FAAF (10 samples, 0.03%)</title><rect x="65.1387%" y="293" width="0.0292%" height="15" fill="rgb(250,205,27)" fg:x="22282" fg:w="10"/><text x="65.3887%" y="303.50"></text></g><g><title>`0x7FFFCA09FABF (9 samples, 0.03%)</title><rect x="65.1679%" y="293" width="0.0263%" height="15" fill="rgb(210,80,43)" fg:x="22292" fg:w="9"/><text x="65.4179%" y="303.50"></text></g><g><title>`0x7FFFCA09FB13 (4 samples, 0.01%)</title><rect x="65.2030%" y="293" width="0.0117%" height="15" fill="rgb(247,160,36)" fg:x="22304" fg:w="4"/><text x="65.4530%" y="303.50"></text></g><g><title>neural_networks.exe`neural_networks::matrices::Matrix::dsigmoid (102 samples, 0.30%)</title><rect x="64.9253%" y="533" width="0.2982%" height="15" fill="rgb(234,13,49)" fg:x="22209" fg:w="102"/><text x="65.1753%" y="543.50"></text></g><g><title>neural_networks.exe`core::iter::traits::iterator::Iterator::collect(core::iter::adapters::map::Map&lt;core::slice::iter::Iter (102 samples, 0.30%)</title><rect x="64.9253%" y="517" width="0.2982%" height="15" fill="rgb(234,122,0)" fg:x="22209" fg:w="102"/><text x="65.1753%" y="527.50"></text></g><g><title>neural_networks.exe`alloc::vec::impl$15::from_iter(core::iter::adapters::map::Map&lt;core::slice::iter::Iter (102 samples, 0.30%)</title><rect x="64.9253%" y="501" width="0.2982%" height="15" fill="rgb(207,146,38)" fg:x="22209" fg:w="102"/><text x="65.1753%" y="511.50"></text></g><g><title>neural_networks.exe`alloc::vec::spec_from_iter::impl$0::from_iter(core::iter::adapters::map::Map&lt;core::slice::iter::Iter (102 samples, 0.30%)</title><rect x="64.9253%" y="485" width="0.2982%" height="15" fill="rgb(207,177,25)" fg:x="22209" fg:w="102"/><text x="65.1753%" y="495.50"></text></g><g><title>neural_networks.exe`alloc::vec::spec_from_iter_nested::impl$1::from_iter(core::iter::adapters::map::Map&lt;core::slice::iter::Iter (102 samples, 0.30%)</title><rect x="64.9253%" y="469" width="0.2982%" height="15" fill="rgb(211,178,42)" fg:x="22209" fg:w="102"/><text x="65.1753%" y="479.50"></text></g><g><title>neural_networks.exe`alloc::vec::spec_extend::impl$1::spec_extend(alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;*, core::iter::adapters::map::Map&lt;core::slice::iter::Iter (102 samples, 0.30%)</title><rect x="64.9253%" y="453" width="0.2982%" height="15" fill="rgb(230,69,54)" fg:x="22209" fg:w="102"/><text x="65.1753%" y="463.50"></text></g><g><title>neural_networks.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::extend_trusted(core::iter::adapters::map::Map&lt;core::slice::iter::Iter (102 samples, 0.30%)</title><rect x="64.9253%" y="437" width="0.2982%" height="15" fill="rgb(214,135,41)" fg:x="22209" fg:w="102"/><text x="65.1753%" y="447.50"></text></g><g><title>neural_networks.exe`core::iter::traits::iterator::Iterator::for_each(core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;f64&gt;,neural_networks::matrices::impl$0::dsigmoid::closure_env$0&gt;, alloc::vec::impl$20::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::Iter (102 samples, 0.30%)</title><rect x="64.9253%" y="421" width="0.2982%" height="15" fill="rgb(237,67,25)" fg:x="22209" fg:w="102"/><text x="65.1753%" y="431.50"></text></g><g><title>neural_networks.exe`core::iter::adapters::map::impl$2::fold(core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;f64&gt;,neural_networks::matrices::impl$0::dsigmoid::closure_env$0&gt;, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;f64,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::Iter (102 samples, 0.30%)</title><rect x="64.9253%" y="405" width="0.2982%" height="15" fill="rgb(222,189,50)" fg:x="22209" fg:w="102"/><text x="65.1753%" y="415.50"></text></g><g><title>neural_networks.exe`core::slice::iter::impl$182::fold(core::slice::iter::Iter&lt;f64&gt;, tuple$&lt;&gt;, core::iter::adapters::map::map_fold::closure_env$0&lt;ref$&lt;f64&gt;,f64,tuple$&lt;&gt;,neural_networks::matrices::impl$0::dsigmoid::closure_env$0,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;f64,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::Iter (102 samples, 0.30%)</title><rect x="64.9253%" y="389" width="0.2982%" height="15" fill="rgb(245,148,34)" fg:x="22209" fg:w="102"/><text x="65.1753%" y="399.50"></text></g><g><title>neural_networks.exe`core::iter::adapters::map::map_fold::closure$0(core::iter::adapters::map::map_fold::closure_env$0&lt;ref$&lt;f64&gt;,f64,tuple$&lt;&gt;,neural_networks::matrices::impl$0::dsigmoid::closure_env$0,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;f64,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;f64&gt;,neural_networks::matrices::impl$0::dsigmoid::closure_env$0&gt; &gt; &gt; &gt;*, tuple$ (102 samples, 0.30%)</title><rect x="64.9253%" y="373" width="0.2982%" height="15" fill="rgb(222,29,6)" fg:x="22209" fg:w="102"/><text x="65.1753%" y="383.50"></text></g><g><title>neural_networks.exe`neural_networks::matrices::impl$0::dsigmoid::closure$0 (100 samples, 0.29%)</title><rect x="64.9312%" y="357" width="0.2923%" height="15" fill="rgb(221,189,43)" fg:x="22211" fg:w="100"/><text x="65.1812%" y="367.50"></text></g><g><title>neural_networks.exe`neural_networks::matrices::num_dsigmoid (100 samples, 0.29%)</title><rect x="64.9312%" y="341" width="0.2923%" height="15" fill="rgb(207,36,27)" fg:x="22211" fg:w="100"/><text x="65.1812%" y="351.50"></text></g><g><title>neural_networks.exe`neural_networks::matrices::num_sigmoid (98 samples, 0.29%)</title><rect x="64.9370%" y="325" width="0.2865%" height="15" fill="rgb(217,90,24)" fg:x="22213" fg:w="98"/><text x="65.1870%" y="335.50"></text></g><g><title>neural_networks.exe`std::f64::impl$0::powf (98 samples, 0.29%)</title><rect x="64.9370%" y="309" width="0.2865%" height="15" fill="rgb(224,66,35)" fg:x="22213" fg:w="98"/><text x="65.1870%" y="319.50"></text></g><g><title>neural_networks.exe`core::iter::traits::iterator::Iterator::for_each::call::closure$0(core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;f64,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;f64&gt;,neural_networks::matrices::impl$0::sigmoid::closure_env$0&gt; &gt; &gt;*, tuple$ (6 samples, 0.02%)</title><rect x="65.2352%" y="357" width="0.0175%" height="15" fill="rgb(221,13,50)" fg:x="22315" fg:w="6"/><text x="65.4852%" y="367.50"></text></g><g><title>neural_networks.exe`alloc::vec::impl$20::extend_trusted::closure$0(alloc::vec::impl$20::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::Iter (6 samples, 0.02%)</title><rect x="65.2352%" y="341" width="0.0175%" height="15" fill="rgb(236,68,49)" fg:x="22315" fg:w="6"/><text x="65.4852%" y="351.50"></text></g><g><title>neural_networks.exe`core::ptr::write (6 samples, 0.02%)</title><rect x="65.2352%" y="325" width="0.0175%" height="15" fill="rgb(229,146,28)" fg:x="22315" fg:w="6"/><text x="65.4852%" y="335.50"></text></g><g><title>`0x7FFFCA09F9C5 (5 samples, 0.01%)</title><rect x="65.2937%" y="309" width="0.0146%" height="15" fill="rgb(225,31,38)" fg:x="22335" fg:w="5"/><text x="65.5437%" y="319.50"></text></g><g><title>`0x7FFFCA09FA12 (6 samples, 0.02%)</title><rect x="65.3112%" y="309" width="0.0175%" height="15" fill="rgb(250,208,3)" fg:x="22341" fg:w="6"/><text x="65.5612%" y="319.50"></text></g><g><title>`0x7FFFCA09FA28 (15 samples, 0.04%)</title><rect x="65.3375%" y="309" width="0.0439%" height="15" fill="rgb(246,54,23)" fg:x="22350" fg:w="15"/><text x="65.5875%" y="319.50"></text></g><g><title>`0x7FFFCA09FA7F (11 samples, 0.03%)</title><rect x="65.3872%" y="309" width="0.0322%" height="15" fill="rgb(243,76,11)" fg:x="22367" fg:w="11"/><text x="65.6372%" y="319.50"></text></g><g><title>`0x7FFFCA09FA8B (5 samples, 0.01%)</title><rect x="65.4194%" y="309" width="0.0146%" height="15" fill="rgb(245,21,50)" fg:x="22378" fg:w="5"/><text x="65.6694%" y="319.50"></text></g><g><title>`0x7FFFCA09FA93 (19 samples, 0.06%)</title><rect x="65.4340%" y="309" width="0.0555%" height="15" fill="rgb(228,9,43)" fg:x="22383" fg:w="19"/><text x="65.6840%" y="319.50"></text></g><g><title>`0x7FFFCA09FAA3 (15 samples, 0.04%)</title><rect x="65.5041%" y="309" width="0.0439%" height="15" fill="rgb(208,100,47)" fg:x="22407" fg:w="15"/><text x="65.7541%" y="319.50"></text></g><g><title>`0x7FFFCA09FAA7 (10 samples, 0.03%)</title><rect x="65.5480%" y="309" width="0.0292%" height="15" fill="rgb(232,26,8)" fg:x="22422" fg:w="10"/><text x="65.7980%" y="319.50"></text></g><g><title>`0x7FFFCA09FAAF (9 samples, 0.03%)</title><rect x="65.5772%" y="309" width="0.0263%" height="15" fill="rgb(216,166,38)" fg:x="22432" fg:w="9"/><text x="65.8272%" y="319.50"></text></g><g><title>`0x7FFFCA09FAB7 (6 samples, 0.02%)</title><rect x="65.6035%" y="309" width="0.0175%" height="15" fill="rgb(251,202,51)" fg:x="22441" fg:w="6"/><text x="65.8535%" y="319.50"></text></g><g><title>`0x7FFFCA09FABF (9 samples, 0.03%)</title><rect x="65.6211%" y="309" width="0.0263%" height="15" fill="rgb(254,216,34)" fg:x="22447" fg:w="9"/><text x="65.8711%" y="319.50"></text></g><g><title>`0x7FFFCA09FB13 (10 samples, 0.03%)</title><rect x="65.6649%" y="309" width="0.0292%" height="15" fill="rgb(251,32,27)" fg:x="22462" fg:w="10"/><text x="65.9149%" y="319.50"></text></g><g><title>`0x7FFFCA09FB42 (4 samples, 0.01%)</title><rect x="65.6971%" y="309" width="0.0117%" height="15" fill="rgb(208,127,28)" fg:x="22473" fg:w="4"/><text x="65.9471%" y="319.50"></text></g><g><title>neural_networks.exe`core::iter::traits::iterator::Iterator::collect(core::iter::adapters::map::Map&lt;core::slice::iter::Iter (164 samples, 0.48%)</title><rect x="65.2323%" y="517" width="0.4794%" height="15" fill="rgb(224,137,22)" fg:x="22314" fg:w="164"/><text x="65.4823%" y="527.50"></text></g><g><title>neural_networks.exe`alloc::vec::impl$15::from_iter(core::iter::adapters::map::Map&lt;core::slice::iter::Iter (164 samples, 0.48%)</title><rect x="65.2323%" y="501" width="0.4794%" height="15" fill="rgb(254,70,32)" fg:x="22314" fg:w="164"/><text x="65.4823%" y="511.50"></text></g><g><title>neural_networks.exe`alloc::vec::spec_from_iter::impl$0::from_iter(core::iter::adapters::map::Map&lt;core::slice::iter::Iter (164 samples, 0.48%)</title><rect x="65.2323%" y="485" width="0.4794%" height="15" fill="rgb(229,75,37)" fg:x="22314" fg:w="164"/><text x="65.4823%" y="495.50"></text></g><g><title>neural_networks.exe`alloc::vec::spec_from_iter_nested::impl$1::from_iter(core::iter::adapters::map::Map&lt;core::slice::iter::Iter (164 samples, 0.48%)</title><rect x="65.2323%" y="469" width="0.4794%" height="15" fill="rgb(252,64,23)" fg:x="22314" fg:w="164"/><text x="65.4823%" y="479.50"></text></g><g><title>neural_networks.exe`alloc::vec::spec_extend::impl$1::spec_extend(alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;*, core::iter::adapters::map::Map&lt;core::slice::iter::Iter (163 samples, 0.48%)</title><rect x="65.2352%" y="453" width="0.4765%" height="15" fill="rgb(232,162,48)" fg:x="22315" fg:w="163"/><text x="65.4852%" y="463.50"></text></g><g><title>neural_networks.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::extend_trusted(core::iter::adapters::map::Map&lt;core::slice::iter::Iter (163 samples, 0.48%)</title><rect x="65.2352%" y="437" width="0.4765%" height="15" fill="rgb(246,160,12)" fg:x="22315" fg:w="163"/><text x="65.4852%" y="447.50"></text></g><g><title>neural_networks.exe`core::iter::traits::iterator::Iterator::for_each(core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;f64&gt;,neural_networks::matrices::impl$0::sigmoid::closure_env$0&gt;, alloc::vec::impl$20::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::Iter (163 samples, 0.48%)</title><rect x="65.2352%" y="421" width="0.4765%" height="15" fill="rgb(247,166,0)" fg:x="22315" fg:w="163"/><text x="65.4852%" y="431.50"></text></g><g><title>neural_networks.exe`core::iter::adapters::map::impl$2::fold(core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;f64&gt;,neural_networks::matrices::impl$0::sigmoid::closure_env$0&gt;, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;f64,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::Iter (163 samples, 0.48%)</title><rect x="65.2352%" y="405" width="0.4765%" height="15" fill="rgb(249,219,21)" fg:x="22315" fg:w="163"/><text x="65.4852%" y="415.50"></text></g><g><title>neural_networks.exe`core::slice::iter::impl$182::fold(core::slice::iter::Iter&lt;f64&gt;, tuple$&lt;&gt;, core::iter::adapters::map::map_fold::closure_env$0&lt;ref$&lt;f64&gt;,f64,tuple$&lt;&gt;,neural_networks::matrices::impl$0::sigmoid::closure_env$0,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;f64,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::Iter (163 samples, 0.48%)</title><rect x="65.2352%" y="389" width="0.4765%" height="15" fill="rgb(205,209,3)" fg:x="22315" fg:w="163"/><text x="65.4852%" y="399.50"></text></g><g><title>neural_networks.exe`core::iter::adapters::map::map_fold::closure$0(core::iter::adapters::map::map_fold::closure_env$0&lt;ref$&lt;f64&gt;,f64,tuple$&lt;&gt;,neural_networks::matrices::impl$0::sigmoid::closure_env$0,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;f64,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;f64&gt;,neural_networks::matrices::impl$0::sigmoid::closure_env$0&gt; &gt; &gt; &gt;*, tuple$ (163 samples, 0.48%)</title><rect x="65.2352%" y="373" width="0.4765%" height="15" fill="rgb(243,44,1)" fg:x="22315" fg:w="163"/><text x="65.4852%" y="383.50"></text></g><g><title>neural_networks.exe`neural_networks::matrices::impl$0::sigmoid::closure$0 (157 samples, 0.46%)</title><rect x="65.2527%" y="357" width="0.4590%" height="15" fill="rgb(206,159,16)" fg:x="22321" fg:w="157"/><text x="65.5027%" y="367.50"></text></g><g><title>neural_networks.exe`neural_networks::matrices::num_sigmoid (157 samples, 0.46%)</title><rect x="65.2527%" y="341" width="0.4590%" height="15" fill="rgb(244,77,30)" fg:x="22321" fg:w="157"/><text x="65.5027%" y="351.50"></text></g><g><title>neural_networks.exe`std::f64::impl$0::powf (156 samples, 0.46%)</title><rect x="65.2556%" y="325" width="0.4560%" height="15" fill="rgb(218,69,12)" fg:x="22322" fg:w="156"/><text x="65.5056%" y="335.50"></text></g><g><title>neural_networks.exe`alloc::vec::impl$13::index(alloc::vec::Vec (4 samples, 0.01%)</title><rect x="65.7760%" y="501" width="0.0117%" height="15" fill="rgb(212,87,7)" fg:x="22500" fg:w="4"/><text x="66.0260%" y="511.50"></text></g><g><title>neural_networks.exe`core::slice::index::impl$0::index(ref$&lt;slice2$ (4 samples, 0.01%)</title><rect x="65.7760%" y="485" width="0.0117%" height="15" fill="rgb(245,114,25)" fg:x="22500" fg:w="4"/><text x="66.0260%" y="495.50"></text></g><g><title>neural_networks.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$ (4 samples, 0.01%)</title><rect x="65.7760%" y="469" width="0.0117%" height="15" fill="rgb(210,61,42)" fg:x="22500" fg:w="4"/><text x="66.0260%" y="479.50"></text></g><g><title>neural_networks.exe`neural_networks::matrices::Matrix::sigmoid (194 samples, 0.57%)</title><rect x="65.2323%" y="533" width="0.5671%" height="15" fill="rgb(211,52,33)" fg:x="22314" fg:w="194"/><text x="65.4823%" y="543.50"></text></g><g><title>neural_networks.exe`neural_networks::matrices::Matrix::sum_all_rows (30 samples, 0.09%)</title><rect x="65.7117%" y="517" width="0.0877%" height="15" fill="rgb(234,58,33)" fg:x="22478" fg:w="30"/><text x="65.9617%" y="527.50"></text></g><g><title>neural_networks.exe`core::iter::range::impl$6::next(core::ops::range::Range (4 samples, 0.01%)</title><rect x="65.7877%" y="501" width="0.0117%" height="15" fill="rgb(220,115,36)" fg:x="22504" fg:w="4"/><text x="66.0377%" y="511.50"></text></g><g><title>neural_networks.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (4 samples, 0.01%)</title><rect x="65.7877%" y="485" width="0.0117%" height="15" fill="rgb(243,153,54)" fg:x="22504" fg:w="4"/><text x="66.0377%" y="495.50"></text></g><g><title>neural_networks.exe`core::iter::range::impl$43::forward_unchecked (4 samples, 0.01%)</title><rect x="65.7877%" y="469" width="0.0117%" height="15" fill="rgb(251,47,18)" fg:x="22504" fg:w="4"/><text x="66.0377%" y="479.50"></text></g><g><title>neural_networks.exe`core::num::impl$11::unchecked_add (4 samples, 0.01%)</title><rect x="65.7877%" y="453" width="0.0117%" height="15" fill="rgb(242,102,42)" fg:x="22504" fg:w="4"/><text x="66.0377%" y="463.50"></text></g><g><title>neural_networks.exe`neural_networks::matrices::Matrix::sum_of_cols (11 samples, 0.03%)</title><rect x="65.7994%" y="533" width="0.0322%" height="15" fill="rgb(234,31,38)" fg:x="22508" fg:w="11"/><text x="66.0494%" y="543.50"></text></g><g><title>neural_networks.exe`core::iter::range::impl$6::next(core::ops::range::Range (4 samples, 0.01%)</title><rect x="65.8199%" y="517" width="0.0117%" height="15" fill="rgb(221,117,51)" fg:x="22515" fg:w="4"/><text x="66.0699%" y="527.50"></text></g><g><title>neural_networks.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (4 samples, 0.01%)</title><rect x="65.8199%" y="501" width="0.0117%" height="15" fill="rgb(212,20,18)" fg:x="22515" fg:w="4"/><text x="66.0699%" y="511.50"></text></g><g><title>neural_networks.exe`core::cmp::impls::impl$58::lt (4 samples, 0.01%)</title><rect x="65.8199%" y="485" width="0.0117%" height="15" fill="rgb(245,133,36)" fg:x="22515" fg:w="4"/><text x="66.0699%" y="495.50"></text></g><g><title>neural_networks.exe`neural_networks::matrices::impl$2::add_assign (54 samples, 0.16%)</title><rect x="65.8316%" y="533" width="0.1579%" height="15" fill="rgb(212,6,19)" fg:x="22519" fg:w="54"/><text x="66.0816%" y="543.50"></text></g><g><title>neural_networks.exe`neural_networks::matrices::Matrix::sum_inplace (54 samples, 0.16%)</title><rect x="65.8316%" y="517" width="0.1579%" height="15" fill="rgb(218,1,36)" fg:x="22519" fg:w="54"/><text x="66.0816%" y="527.50"></text></g><g><title>neural_networks.exe`core::iter::range::impl$6::next(core::ops::range::Range (7 samples, 0.02%)</title><rect x="65.9690%" y="501" width="0.0205%" height="15" fill="rgb(246,84,54)" fg:x="22566" fg:w="7"/><text x="66.2190%" y="511.50"></text></g><g><title>neural_networks.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (7 samples, 0.02%)</title><rect x="65.9690%" y="485" width="0.0205%" height="15" fill="rgb(242,110,6)" fg:x="22566" fg:w="7"/><text x="66.2190%" y="495.50"></text></g><g><title>neural_networks.exe`core::iter::range::impl$43::forward_unchecked (7 samples, 0.02%)</title><rect x="65.9690%" y="469" width="0.0205%" height="15" fill="rgb(214,47,5)" fg:x="22566" fg:w="7"/><text x="66.2190%" y="479.50"></text></g><g><title>neural_networks.exe`core::num::impl$11::unchecked_add (7 samples, 0.02%)</title><rect x="65.9690%" y="453" width="0.0205%" height="15" fill="rgb(218,159,25)" fg:x="22566" fg:w="7"/><text x="66.2190%" y="463.50"></text></g><g><title>neural_networks.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::push (59 samples, 0.17%)</title><rect x="65.9923%" y="501" width="0.1725%" height="15" fill="rgb(215,211,28)" fg:x="22574" fg:w="59"/><text x="66.2423%" y="511.50"></text></g><g><title>neural_networks.exe`core::iter::range::impl$6::next(core::ops::range::Range (6 samples, 0.02%)</title><rect x="66.1736%" y="485" width="0.0175%" height="15" fill="rgb(238,59,32)" fg:x="22636" fg:w="6"/><text x="66.4236%" y="495.50"></text></g><g><title>neural_networks.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (6 samples, 0.02%)</title><rect x="66.1736%" y="469" width="0.0175%" height="15" fill="rgb(226,82,3)" fg:x="22636" fg:w="6"/><text x="66.4236%" y="479.50"></text></g><g><title>`0x7FFFCA0D349E (9,270 samples, 27.10%)</title><rect x="72.7337%" y="453" width="27.0997%" height="15" fill="rgb(240,164,32)" fg:x="24880" fg:w="9270"/><text x="72.9837%" y="463.50">`0x7FFFCA0D349E</text></g><g><title>neural_networks.exe`neural_networks::matrices::impl$3::mul (11,597 samples, 33.90%)</title><rect x="65.9894%" y="533" width="33.9024%" height="15" fill="rgb(232,46,7)" fg:x="22573" fg:w="11597"/><text x="66.2394%" y="543.50">neural_networks.exe`neural_networks::matrices::impl$3::..</text></g><g><title>neural_networks.exe`neural_networks::matrices::Matrix::mult (11,597 samples, 33.90%)</title><rect x="65.9894%" y="517" width="33.9024%" height="15" fill="rgb(229,129,53)" fg:x="22573" fg:w="11597"/><text x="66.2394%" y="527.50">neural_networks.exe`neural_networks::matrices::Matrix::..</text></g><g><title>neural_networks.exe`core::iter::traits::iterator::Iterator::fold(core::ops::range::Range (11,534 samples, 33.72%)</title><rect x="66.1736%" y="501" width="33.7182%" height="15" fill="rgb(234,188,29)" fg:x="22636" fg:w="11534"/><text x="66.4236%" y="511.50">neural_networks.exe`core::iter::traits::iterator::Itera..</text></g><g><title>neural_networks.exe`neural_networks::matrices::impl$0::mult::closure$0 (11,528 samples, 33.70%)</title><rect x="66.1911%" y="485" width="33.7007%" height="15" fill="rgb(246,141,4)" fg:x="22642" fg:w="11528"/><text x="66.4411%" y="495.50">neural_networks.exe`neural_networks::matrices::impl$0::..</text></g><g><title>neural_networks.exe`alloc::vec::impl$13::index(alloc::vec::Vec (9,492 samples, 27.75%)</title><rect x="72.1431%" y="469" width="27.7487%" height="15" fill="rgb(229,23,39)" fg:x="24678" fg:w="9492"/><text x="72.3931%" y="479.50">neural_networks.exe`alloc::vec::impl$13::inde..</text></g><g><title>neural_networks.exe`core::slice::index::impl$0::index(ref$&lt;slice2$ (20 samples, 0.06%)</title><rect x="99.8334%" y="453" width="0.0585%" height="15" fill="rgb(206,12,3)" fg:x="34150" fg:w="20"/><text x="100.0834%" y="463.50"></text></g><g><title>neural_networks.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$ (20 samples, 0.06%)</title><rect x="99.8334%" y="437" width="0.0585%" height="15" fill="rgb(252,226,20)" fg:x="34150" fg:w="20"/><text x="100.0834%" y="447.50"></text></g><g><title>neural_networks.exe`neural_networks::network::NeuralNetwork::learn (24,098 samples, 70.45%)</title><rect x="29.4472%" y="549" width="70.4476%" height="15" fill="rgb(216,123,35)" fg:x="10073" fg:w="24098"/><text x="29.6972%" y="559.50">neural_networks.exe`neural_networks::network::NeuralNetwork::learn</text></g><g><title>`0x7FFFCCAB0462 (4 samples, 0.01%)</title><rect x="99.9065%" y="341" width="0.0117%" height="15" fill="rgb(212,68,40)" fg:x="34175" fg:w="4"/><text x="100.1565%" y="351.50"></text></g><g><title>`0x7FFFCCA37B9F (7 samples, 0.02%)</title><rect x="99.9035%" y="357" width="0.0205%" height="15" fill="rgb(254,125,32)" fg:x="34174" fg:w="7"/><text x="100.1535%" y="367.50"></text></g><g><title>`0x7FFFCCA368C4 (13 samples, 0.04%)</title><rect x="99.8948%" y="389" width="0.0380%" height="15" fill="rgb(253,97,22)" fg:x="34171" fg:w="13"/><text x="100.1448%" y="399.50"></text></g><g><title>`0x7FFFCCA36A04 (13 samples, 0.04%)</title><rect x="99.8948%" y="373" width="0.0380%" height="15" fill="rgb(241,101,14)" fg:x="34171" fg:w="13"/><text x="100.1448%" y="383.50"></text></g><g><title>neural_networks.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::with_capacity (14 samples, 0.04%)</title><rect x="99.8948%" y="469" width="0.0409%" height="15" fill="rgb(238,103,29)" fg:x="34171" fg:w="14"/><text x="100.1448%" y="479.50"></text></g><g><title>neural_networks.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (14 samples, 0.04%)</title><rect x="99.8948%" y="453" width="0.0409%" height="15" fill="rgb(233,195,47)" fg:x="34171" fg:w="14"/><text x="100.1448%" y="463.50"></text></g><g><title>neural_networks.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (14 samples, 0.04%)</title><rect x="99.8948%" y="437" width="0.0409%" height="15" fill="rgb(246,218,30)" fg:x="34171" fg:w="14"/><text x="100.1448%" y="447.50"></text></g><g><title>neural_networks.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (14 samples, 0.04%)</title><rect x="99.8948%" y="421" width="0.0409%" height="15" fill="rgb(219,145,47)" fg:x="34171" fg:w="14"/><text x="100.1448%" y="431.50"></text></g><g><title>neural_networks.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (14 samples, 0.04%)</title><rect x="99.8948%" y="405" width="0.0409%" height="15" fill="rgb(243,12,26)" fg:x="34171" fg:w="14"/><text x="100.1448%" y="415.50"></text></g><g><title>neural_networks.exe`neural_networks::vec_label (17 samples, 0.05%)</title><rect x="99.8948%" y="549" width="0.0497%" height="15" fill="rgb(214,87,16)" fg:x="34171" fg:w="17"/><text x="100.1448%" y="559.50"></text></g><g><title>neural_networks.exe`core::iter::traits::iterator::Iterator::collect(core::iter::adapters::take::Take&lt;core::iter::sources::repeat_with::RepeatWith (17 samples, 0.05%)</title><rect x="99.8948%" y="533" width="0.0497%" height="15" fill="rgb(208,99,42)" fg:x="34171" fg:w="17"/><text x="100.1448%" y="543.50"></text></g><g><title>neural_networks.exe`alloc::vec::impl$15::from_iter(core::iter::adapters::take::Take&lt;core::iter::sources::repeat_with::RepeatWith (17 samples, 0.05%)</title><rect x="99.8948%" y="517" width="0.0497%" height="15" fill="rgb(253,99,2)" fg:x="34171" fg:w="17"/><text x="100.1448%" y="527.50"></text></g><g><title>neural_networks.exe`alloc::vec::spec_from_iter::impl$0::from_iter(core::iter::adapters::take::Take&lt;core::iter::sources::repeat_with::RepeatWith (17 samples, 0.05%)</title><rect x="99.8948%" y="501" width="0.0497%" height="15" fill="rgb(220,168,23)" fg:x="34171" fg:w="17"/><text x="100.1448%" y="511.50"></text></g><g><title>neural_networks.exe`alloc::vec::spec_from_iter_nested::impl$1::from_iter(core::iter::adapters::take::Take&lt;core::iter::sources::repeat_with::RepeatWith (17 samples, 0.05%)</title><rect x="99.8948%" y="485" width="0.0497%" height="15" fill="rgb(242,38,24)" fg:x="34171" fg:w="17"/><text x="100.1448%" y="495.50"></text></g><g><title>neural_networks.exe`neural_networks::main::train (31,989 samples, 93.52%)</title><rect x="6.4314%" y="565" width="93.5159%" height="15" fill="rgb(225,182,9)" fg:x="2200" fg:w="31989"/><text x="6.6814%" y="575.50">neural_networks.exe`neural_networks::main::train</text></g><g><title>`0x7FFFCCABC5DC (34,189 samples, 99.95%)</title><rect x="0.0029%" y="773" width="99.9474%" height="15" fill="rgb(243,178,37)" fg:x="1" fg:w="34189"/><text x="0.2529%" y="783.50">`0x7FFFCCABC5DC</text></g><g><title>`0x7FFFCB8DE8D7 (34,189 samples, 99.95%)</title><rect x="0.0029%" y="757" width="99.9474%" height="15" fill="rgb(232,139,19)" fg:x="1" fg:w="34189"/><text x="0.2529%" y="767.50">`0x7FFFCB8DE8D7</text></g><g><title>neural_networks.exe`__scrt_common_main_seh() (34,186 samples, 99.94%)</title><rect x="0.0117%" y="741" width="99.9386%" height="15" fill="rgb(225,201,24)" fg:x="4" fg:w="34186"/><text x="0.2617%" y="751.50">neural_networks.exe`__scrt_common_main_seh()</text></g><g><title>neural_networks.exe`invoke_main() (34,178 samples, 99.92%)</title><rect x="0.0351%" y="725" width="99.9152%" height="15" fill="rgb(221,47,46)" fg:x="12" fg:w="34178"/><text x="0.2851%" y="735.50">neural_networks.exe`invoke_main()</text></g><g><title>neural_networks.exe`main (34,178 samples, 99.92%)</title><rect x="0.0351%" y="709" width="99.9152%" height="15" fill="rgb(249,23,13)" fg:x="12" fg:w="34178"/><text x="0.2851%" y="719.50">neural_networks.exe`main</text></g><g><title>neural_networks.exe`std::rt::lang_start_internal (34,178 samples, 99.92%)</title><rect x="0.0351%" y="693" width="99.9152%" height="15" fill="rgb(219,9,5)" fg:x="12" fg:w="34178"/><text x="0.2851%" y="703.50">neural_networks.exe`std::rt::lang_start_internal</text></g><g><title>neural_networks.exe`std::panic::catch_unwind (34,178 samples, 99.92%)</title><rect x="0.0351%" y="677" width="99.9152%" height="15" fill="rgb(254,171,16)" fg:x="12" fg:w="34178"/><text x="0.2851%" y="687.50">neural_networks.exe`std::panic::catch_unwind</text></g><g><title>neural_networks.exe`std::panicking::try (34,178 samples, 99.92%)</title><rect x="0.0351%" y="661" width="99.9152%" height="15" fill="rgb(230,171,20)" fg:x="12" fg:w="34178"/><text x="0.2851%" y="671.50">neural_networks.exe`std::panicking::try</text></g><g><title>neural_networks.exe`std::panicking::try::do_call (34,178 samples, 99.92%)</title><rect x="0.0351%" y="645" width="99.9152%" height="15" fill="rgb(210,71,41)" fg:x="12" fg:w="34178"/><text x="0.2851%" y="655.50">neural_networks.exe`std::panicking::try::do_call</text></g><g><title>neural_networks.exe`std::rt::lang_start_internal::closure$0 (34,178 samples, 99.92%)</title><rect x="0.0351%" y="629" width="99.9152%" height="15" fill="rgb(206,173,20)" fg:x="12" fg:w="34178"/><text x="0.2851%" y="639.50">neural_networks.exe`std::rt::lang_start_internal::closure$0</text></g><g><title>neural_networks.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$ (34,178 samples, 99.92%)</title><rect x="0.0351%" y="613" width="99.9152%" height="15" fill="rgb(233,88,34)" fg:x="12" fg:w="34178"/><text x="0.2851%" y="623.50">neural_networks.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$</text></g><g><title>neural_networks.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (34,178 samples, 99.92%)</title><rect x="0.0351%" y="597" width="99.9152%" height="15" fill="rgb(223,209,46)" fg:x="12" fg:w="34178"/><text x="0.2851%" y="607.50">neural_networks.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*)</text></g><g><title>neural_networks.exe`neural_networks::main (34,178 samples, 99.92%)</title><rect x="0.0351%" y="581" width="99.9152%" height="15" fill="rgb(250,43,18)" fg:x="12" fg:w="34178"/><text x="0.2851%" y="591.50">neural_networks.exe`neural_networks::main</text></g><g><title>`0x7FFFCCAF8984 (7 samples, 0.02%)</title><rect x="99.9591%" y="709" width="0.0205%" height="15" fill="rgb(208,13,10)" fg:x="34193" fg:w="7"/><text x="100.2091%" y="719.50"></text></g><g><title>`0x7FFFCCA74560 (7 samples, 0.02%)</title><rect x="99.9591%" y="693" width="0.0205%" height="15" fill="rgb(212,200,36)" fg:x="34193" fg:w="7"/><text x="100.2091%" y="703.50"></text></g><g><title>`0x7FFFCCA2FAD0 (7 samples, 0.02%)</title><rect x="99.9591%" y="677" width="0.0205%" height="15" fill="rgb(225,90,30)" fg:x="34193" fg:w="7"/><text x="100.2091%" y="687.50"></text></g><g><title>`0x7FFFCCA8BA79 (8 samples, 0.02%)</title><rect x="99.9591%" y="725" width="0.0234%" height="15" fill="rgb(236,182,39)" fg:x="34193" fg:w="8"/><text x="100.2091%" y="735.50"></text></g><g><title>all (34,207 samples, 100%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(212,144,35)" fg:x="0" fg:w="34207"/><text x="0.2500%" y="799.50"></text></g><g><title>`0x7FFFCCB1270E (17 samples, 0.05%)</title><rect x="99.9503%" y="773" width="0.0497%" height="15" fill="rgb(228,63,44)" fg:x="34190" fg:w="17"/><text x="100.2003%" y="783.50"></text></g><g><title>`0x7FFFCCA8AA22 (17 samples, 0.05%)</title><rect x="99.9503%" y="757" width="0.0497%" height="15" fill="rgb(228,109,6)" fg:x="34190" fg:w="17"/><text x="100.2003%" y="767.50"></text></g><g><title>`0x7FFFCCA8AC38 (17 samples, 0.05%)</title><rect x="99.9503%" y="741" width="0.0497%" height="15" fill="rgb(238,117,24)" fg:x="34190" fg:w="17"/><text x="100.2003%" y="751.50"></text></g></svg></svg>